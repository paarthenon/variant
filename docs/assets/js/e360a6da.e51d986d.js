"use strict";(self.webpackChunkvariant_site=self.webpackChunkvariant_site||[]).push([[5969],{3905:function(n,e,a){a.d(e,{Zo:function(){return m},kt:function(){return F}});var t=a(7294);function r(n,e,a){return e in n?Object.defineProperty(n,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[e]=a,n}function s(n,e){var a=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.push.apply(a,t)}return a}function i(n){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?s(Object(a),!0).forEach((function(e){r(n,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(a,e))}))}return n}function p(n,e){if(null==n)return{};var a,t,r=function(n,e){if(null==n)return{};var a,t,r={},s=Object.keys(n);for(t=0;t<s.length;t++)a=s[t],e.indexOf(a)>=0||(r[a]=n[a]);return r}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(t=0;t<s.length;t++)a=s[t],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(r[a]=n[a])}return r}var l=t.createContext({}),o=function(n){var e=t.useContext(l),a=e;return n&&(a="function"==typeof n?n(e):i(i({},e),n)),a},m=function(n){var e=o(n.components);return t.createElement(l.Provider,{value:e},n.children)},d="mdxType",c={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},g=t.forwardRef((function(n,e){var a=n.components,r=n.mdxType,s=n.originalType,l=n.parentName,m=p(n,["components","mdxType","originalType","parentName"]),d=o(a),g=r,F=d["".concat(l,".").concat(g)]||d[g]||c[g]||s;return a?t.createElement(F,i(i({ref:e},m),{},{components:a})):t.createElement(F,i({ref:e},m))}));function F(n,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var s=a.length,i=new Array(s);i[0]=g;var p={};for(var l in e)hasOwnProperty.call(e,l)&&(p[l]=e[l]);p.originalType=n,p[d]="string"==typeof n?n:r,i[1]=p;for(var o=2;o<s;o++)i[o]=a[o];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},5183:function(n,e,a){a.r(e),a.d(e,{assets:function(){return m},contentTitle:function(){return l},default:function(){return F},frontMatter:function(){return p},metadata:function(){return o},toc:function(){return d}});var t=a(3117),r=a(102),s=(a(7294),a(3905)),i=["components"],p={title:"Matcher"},l=void 0,o={unversionedId:"book/matcher",id:"book/matcher",title:"Matcher",description:"Variant providers matcher(), a builder-pattern API for matching against variants and literal unions. The matcher allows users to build a handler piece-by-piece, which can become especially important for larger variants. As your unions grow to dozens or hundreds of cases, the matcher will become more and more relevant.",source:"@site/docs/book/matcher.md",sourceDirName:"book",slug:"/book/matcher",permalink:"/variant/docs/next/book/matcher",draft:!1,tags:[],version:"current",frontMatter:{title:"Matcher"},sidebar:"someSidebar",previous:{title:"Match",permalink:"/variant/docs/next/book/match"},next:{title:"Catalog",permalink:"/variant/docs/next/book/catalog"}},m={},d=[{value:"<code>.with()</code>",id:"with",level:2},{value:"Multi-matching \u2014 <code>.when()</code>",id:"multi-matching--when",level:2},{value:"Delegating to sub-matchers",id:"delegating-to-sub-matchers",level:3},{value:"Constants \u2014 <code>.register()</code>",id:"constants--register",level:2},{value:"Terminals",id:"terminals",level:2},{value:"<code>.complete()</code>",id:"complete",level:3},{value:"<code>.else()</code>",id:"else",level:3},{value:"<code>.execute()</code>",id:"execute",level:3},{value:"<code>.exhaust()</code>",id:"exhaust",level:3},{value:"<code>.lookup()</code>",id:"lookup",level:3}],c={toc:d},g="wrapper";function F(n){var e=n.components,a=(0,r.Z)(n,i);return(0,s.kt)(g,(0,t.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("div",{className:"shiki-twoslash-fragment"}),(0,s.kt)("p",null,"Variant providers ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"matcher()"),", a builder-pattern API")," for matching against variants and literal unions. The matcher allows users to build a handler piece-by-piece, which can become especially important for larger variants. As your unions grow to dozens or hundreds of cases, the matcher will become more and more relevant."),(0,s.kt)("h2",{id:"with"},(0,s.kt)("inlineCode",{parentName:"h2"},".with()")),(0,s.kt)("p",null,"Its most basic use resembles the ",(0,s.kt)("inlineCode",{parentName:"p"},"match()")," function, accepting an object with each case handled as a property."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const describePetting: (animal: Animal) => string"},"describePetting")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases, object-style.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.with<{\n    cat: ({ name }: {\n        type: "cat";\n        name: string;\n        furnitureDamaged: number;\n    }) => string;\n    dog: ({ name }: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => string;\n    snake: ({ name, pattern }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}>(variations: {\n    cat: ({ name }: {\n        type: "cat";\n        name: string;\n        furnitureDamaged: number;\n    }) => string;\n    dog: ({ name }: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => string;\n    snake: ({ name, pattern }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}): Matcher<...>'},"with")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) cat: ({ name }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n}) => string'},"cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`You stroke "),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'s fur.`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: ({ name }: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`You stroke "),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'s fur.`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: ({ name, pattern }: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`You pet "),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'s "),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}}," skin`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    })")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", { cat: ({ name }: { type: "cat"; name: string; furnitureDamaged: number; }) => string; dog: ({ name }: { ...; }) => string; snake: ({ name, pattern }: { ...; }) => string; }>.complete: (options?: CompleteOptions | undefined) => string'},"complete")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"()"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"const describePetting: (animal: Animal) => string"},"describePetting")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases, object-style.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.with<{\n    cat: ({ name }: {\n        type: "cat";\n        name: string;\n        furnitureDamaged: number;\n    }) => string;\n    dog: ({ name }: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => string;\n    snake: ({ name, pattern }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}>(variations: {\n    cat: ({ name }: {\n        type: "cat";\n        name: string;\n        furnitureDamaged: number;\n    }) => string;\n    dog: ({ name }: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => string;\n    snake: ({ name, pattern }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}): Matcher<...>'},"with")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) cat: ({ name }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n}) => string'},"cat"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"You stroke ${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}'s fur."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: ({ name }: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string'},"dog"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"You stroke ${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}'s fur."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: ({ name, pattern }: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string'},"snake"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"You pet ${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}'s ${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"} skin"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    }"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", { cat: ({ name }: { type: "cat"; name: string; furnitureDamaged: number; }) => string; dog: ({ name }: { ...; }) => string; snake: ({ name, pattern }: { ...; }) => string; }>.complete: (options?: CompleteOptions | undefined) => string'},"complete")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"()")))))),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},".complete()")," function is a ",(0,s.kt)("strong",{parentName:"p"},"terminal")," method, one of the functions of the matcher that actually executes the match operation. There are ",(0,s.kt)("a",{parentName:"p",href:"#terminals"},"other terminals"),", each with their own purpose. ",(0,s.kt)("em",{parentName:"p"},"Error reporting")," is ",(0,s.kt)("inlineCode",{parentName:"p"},".complete()"),"'s specialty."),(0,s.kt)("p",null,"Let's say we overlooked some of the cases in the above function."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const describePetting: (animal: Animal) => any"},"describePetting")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases, object-style.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.with<{\n    snake: ({ name }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}>(variations: {\n    snake: ({ name }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}): Matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, "type", {\n    snake: ({ name }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}>'},"with")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: ({ name }: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`You let "),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}}," wrap around your hand.`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    })")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-err",{parentName:"span"},(0,s.kt)("data-lsp",{parentName:"data-err",lsp:'(property) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", { snake: ({ name }: { type: "snake"; name: string; pattern: string; }) => string; }>.complete: VariantError<["The handler has not been fully completed. Expected key(s)", "cat" | "dog"]>'},"complete"))),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"()")),(0,s.kt)("span",{parentName:"code",className:"error"},(0,s.kt)("span",{parentName:"span"},'This expression is not callable.\n  Type \'VariantError<["The handler has not been fully completed. Expected key(s)", "cat" | "dog"]>\' has no call signatures.'),(0,s.kt)("span",{parentName:"span",className:"code"},"2349")),(0,s.kt)("span",{parentName:"code",className:"error-behind"},'This expression is not callable.\n  Type \'VariantError<["The handler has not been fully completed. Expected key(s)", "cat" | "dog"]>\' has no call signatures.')))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"const describePetting: (animal: Animal) => any"},"describePetting")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases, object-style.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.with<{\n    snake: ({ name }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}>(variations: {\n    snake: ({ name }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}): Matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, "type", {\n    snake: ({ name }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}>'},"with")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: ({ name }: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string'},"snake"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"You let ${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"} wrap around your hand."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    }"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-err",{parentName:"span"},(0,s.kt)("data-lsp",{parentName:"data-err",lsp:'(property) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", { snake: ({ name }: { type: "snake"; name: string; pattern: string; }) => string; }>.complete: VariantError<["The handler has not been fully completed. Expected key(s)", "cat" | "dog"]>'},"complete"))),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"()")),(0,s.kt)("span",{parentName:"code",className:"error"},(0,s.kt)("span",{parentName:"span"},'This expression is not callable.\n  Type \'VariantError<["The handler has not been fully completed. Expected key(s)", "cat" | "dog"]>\' has no call signatures.'),(0,s.kt)("span",{parentName:"span",className:"code"},"2349")),(0,s.kt)("span",{parentName:"code",className:"error-behind"},'This expression is not callable.\n  Type \'VariantError<["The handler has not been fully completed. Expected key(s)", "cat" | "dog"]>\' has no call signatures.'))))),(0,s.kt)("p",null,"The matcher will report exactly which keys are missing."),(0,s.kt)("h2",{id:"multi-matching--when"},"Multi-matching \u2014 ",(0,s.kt)("inlineCode",{parentName:"h2"},".when()")),(0,s.kt)("p",null,"We need to handle cats and dogs again, but it feels a little repetitive to have duplicate logic for the ",(0,s.kt)("inlineCode",{parentName:"p"},"cat")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"dog")," branches since we handle them the same way. The ",(0,s.kt)("inlineCode",{parentName:"p"},".when()")," method will allow us to handle multiple subtypes with the same logic. "),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const describePetting: (animal: Animal) => string"},"describePetting")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases, object-style.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.with<{\n    snake: ({ name }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}>(variations: {\n    snake: ({ name }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}): Matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, "type", {\n    snake: ({ name }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}>'},"with")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: ({ name }: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`You let "),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}}," wrap around your hand.`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    })")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", { snake: ({ name }: { type: "snake"; name: string; pattern: string; }) => string; }>.when<"cat" | "dog", ({ name }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string>(variations: "cat" | "dog" | ("cat" | "dog")[], handler: ({ name }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string): Matcher<...> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"(["),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'cat'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'dog'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"], ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`You stroke "),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'s fur.`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", { snake: ({ name }: { type: "snake"; name: string; pattern: string; }) => string; } & Record<...>>.complete: (options?: CompleteOptions | undefined) => string'},"complete")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"()"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"const describePetting: (animal: Animal) => string"},"describePetting")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases, object-style.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.with<{\n    snake: ({ name }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}>(variations: {\n    snake: ({ name }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}): Matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, "type", {\n    snake: ({ name }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}>'},"with")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: ({ name }: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string'},"snake"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"You let ${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"} wrap around your hand."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    }"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", { snake: ({ name }: { type: "snake"; name: string; pattern: string; }) => string; }>.when<"cat" | "dog", ({ name }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string>(variations: "cat" | "dog" | ("cat" | "dog")[], handler: ({ name }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string): Matcher<...> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"["),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"cat"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"dog"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"], "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"You stroke ${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}'s fur."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", { snake: ({ name }: { type: "snake"; name: string; pattern: string; }) => string; } & Record<...>>.complete: (options?: CompleteOptions | undefined) => string'},"complete")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"()")))))),(0,s.kt)("p",null,"Note that the ",(0,s.kt)("inlineCode",{parentName:"p"},"name")," property is available to the handler function, since it is present on both ",(0,s.kt)("inlineCode",{parentName:"p"},"Animal<'cat'>")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"Animal<'dog'>"),". "),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},".when()")," can handle single cases as well, allowing the previous code to be written as"),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const describePetting: (animal: Animal) => string"},"describePetting")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.when<"snake", ({ name }: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string>(variations: "snake" | "snake"[], handler: ({ name }: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string): Matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, "type", Record<...>> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'snake'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`You let "),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}}," wrap around your hand.`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", Record<"snake", ({ name }: { type: "snake"; name: string; pattern: string; }) => string>>.when<"cat" | "dog", ({ name }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string>(variations: "cat" | "dog" | ("cat" | "dog")[], handler: ({ name }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string): Matcher<...> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"(["),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'cat'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'dog'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"], ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`You stroke "),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'s fur.`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", Record<"snake", ({ name }: { type: "snake"; name: string; pattern: string; }) => string> & Record<...>>.complete: (options?: CompleteOptions | undefined) => string'},"complete")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"()"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"const describePetting: (animal: Animal) => string"},"describePetting")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.when<"snake", ({ name }: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string>(variations: "snake" | "snake"[], handler: ({ name }: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string): Matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, "type", Record<...>> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"snake"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"You let ${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"} wrap around your hand."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", Record<"snake", ({ name }: { type: "snake"; name: string; pattern: string; }) => string>>.when<"cat" | "dog", ({ name }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string>(variations: "cat" | "dog" | ("cat" | "dog")[], handler: ({ name }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string): Matcher<...> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"["),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"cat"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"dog"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"], "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"You stroke ${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}'s fur."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", Record<"snake", ({ name }: { type: "snake"; name: string; pattern: string; }) => string> & Record<...>>.complete: (options?: CompleteOptions | undefined) => string'},"complete")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"()")))))),(0,s.kt)("admonition",{title:"Alternate Syntax",type:"info"},(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("inlineCode",{parentName:"p"},".when()"),", like ",(0,s.kt)("inlineCode",{parentName:"p"},"isType()"),", can accept variant creators as input. "),(0,s.kt)("div",{parentName:"admonition",className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const describePetting: (animal: Animal) => string"},"describePetting")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.when<VariantCreator<"snake", (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}, "type">, ({ name }: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string>(variations: VariantCreator<"snake", (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}, "type"> | VariantCreator<...>[], handler: ({ name }: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string): Matcher<...> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: VariantCreator<"snake", (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}, "type">'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`You let "),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}}," wrap around your hand.`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", Record<"snake", ({ name }: { type: "snake"; name: string; pattern: string; }) => string>>.when<VariantCreator<"cat", (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}, "type"> | VariantCreator<"dog", (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}, "type">, ({ name }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string>(variations: VariantCreator<...> | ... 1 more ... | (VariantCreator<...> | VariantCreator<...>)[], handler: ({ name }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string): Matcher<...> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"(["),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) cat: VariantCreator<"cat", (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}, "type">'},"cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: VariantCreator<"dog", (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}, "type">'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"], ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`You stroke "),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'s fur.`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", Record<"snake", ({ name }: { type: "snake"; name: string; pattern: string; }) => string> & Record<...>>.complete: (options?: CompleteOptions | undefined) => string'},"complete")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"()"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"const describePetting: (animal: Animal) => string"},"describePetting")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.when<VariantCreator<"snake", (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}, "type">, ({ name }: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string>(variations: VariantCreator<"snake", (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}, "type"> | VariantCreator<...>[], handler: ({ name }: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string): Matcher<...> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: VariantCreator<"snake", (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}, "type">'},"snake"),", "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"You let ${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"} wrap around your hand."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", Record<"snake", ({ name }: { type: "snake"; name: string; pattern: string; }) => string>>.when<VariantCreator<"cat", (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}, "type"> | VariantCreator<"dog", (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}, "type">, ({ name }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string>(variations: VariantCreator<...> | ... 1 more ... | (VariantCreator<...> | VariantCreator<...>)[], handler: ({ name }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string): Matcher<...> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"["),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) cat: VariantCreator<"cat", (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}, "type">'},"cat"),", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: VariantCreator<"dog", (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}, "type">'},"dog"),"], "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"You stroke ${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}'s fur."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", Record<"snake", ({ name }: { type: "snake"; name: string; pattern: string; }) => string> & Record<...>>.complete: (options?: CompleteOptions | undefined) => string'},"complete")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"()"))))))),(0,s.kt)("h3",{id:"delegating-to-sub-matchers"},"Delegating to sub-matchers"),(0,s.kt)("p",null,"Pair ",(0,s.kt)("inlineCode",{parentName:"p"},".when()")," with ",(0,s.kt)("inlineCode",{parentName:"p"},"types()")," for simple and elegant delegation to subtypes. Let's imagine a more complex ",(0,s.kt)("inlineCode",{parentName:"p"},"Animal")," type, broken down into ",(0,s.kt)("inlineCode",{parentName:"p"},"LandAnimal"),"s and ",(0,s.kt)("inlineCode",{parentName:"p"},"AirAnimal"),"s."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"}),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"import"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," {"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) const variant: {\n    <VM extends RawVariant>(template: GenericTemplate<VM>): Identity<GenericVariantRecord<VM, "type">>;\n    <VM_1 extends RawVariant>(template: VM_1): Identity<...>;\n    <T extends string | VariantCreator<...>>(template: T[]): Identity<...>;\n}\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\n\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) function fields<T extends {}>(defaults?: Partial<T>): (...args: {} extends T ? ([input: T] | []) : [input: T]) => T\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<...>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"} "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"from"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'variant'")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const LandAnimal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"LandAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) variant<{\n    cat: (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    };\n    dog: (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    };\n    snake: (name: string, pattern?: string) => {\n        ...;\n    };\n}>(template: {\n    cat: (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    };\n    dog: (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    };\n    snake: (name: string, pattern?: string) => {\n        ...;\n    };\n}): {\n    ...;\n} (+2 overloads)\nimport variant"},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) cat: (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}"},"cat"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\n\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    furnitureDamaged: number;\n}>(defaults?: Partial<{\n    name: string;\n    furnitureDamaged: number;\n}> | undefined): (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"<{",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"number"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}>(),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) dog: (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}"},"dog"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\n\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    favoriteBall?: string | undefined;\n}>(defaults?: Partial<{\n    name: string;\n    favoriteBall?: string | undefined;\n}> | undefined): (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"<{",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) favoriteBall?: string | undefined"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"?:"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}>(),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) snake: (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}"},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'striped'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"})")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type LandAnimal = {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"LandAnimal")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<...>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf"),"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const LandAnimal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"LandAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},">;")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const AirAnimal: {\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n}'},"AirAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) variant<{\n    bat: (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    };\n    bird: (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    };\n}>(template: {\n    bat: (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    };\n    bird: (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    };\n}): {\n    ...;\n} (+2 overloads)\nimport variant"},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) bat: (input: {\n    name: string;\n    favoriteFruit: string;\n}) => {\n    name: string;\n    favoriteFruit: string;\n}"},"bat"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\n\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    favoriteFruit: string;\n}>(defaults?: Partial<{\n    name: string;\n    favoriteFruit: string;\n}> | undefined): (input: {\n    name: string;\n    favoriteFruit: string;\n}) => {\n    name: string;\n    favoriteFruit: string;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"<{",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) favoriteFruit: string"},"favoriteFruit")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}>(),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) bird: (input: {\n    name: string;\n    featherColor: string;\n}) => {\n    name: string;\n    featherColor: string;\n}"},"bird"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\n\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    featherColor: string;\n}>(defaults?: Partial<{\n    name: string;\n    featherColor: string;\n}> | undefined): (input: {\n    name: string;\n    featherColor: string;\n}) => {\n    name: string;\n    featherColor: string;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"<{",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) featherColor: string"},"featherColor")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}>(),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"})")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type AirAnimal = {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    type: "bird";\n    name: string;\n    featherColor: string;\n}'},"AirAnimal")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<...>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf"),"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const AirAnimal: {\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n}'},"AirAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},">;")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n    cat: VariantCreator<...>;\n    dog: VariantCreator<...>;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) variant<{\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n    cat: VariantCreator<...>;\n    dog: VariantCreator<...>;\n    snake: VariantCreator<...>;\n}>(template: {\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n    cat: VariantCreator<...>;\n    dog: VariantCreator<...>;\n    snake: VariantCreator<...>;\n}): {\n    ...;\n} (+2 overloads)\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"..."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const LandAnimal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"LandAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"..."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const AirAnimal: {\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n}'},"AirAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"})")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal = {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} | {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    type: "bird";\n    name: string;\n    featherColor: string;\n}'},"Animal")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<...>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf"),"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n    cat: VariantCreator<...>;\n    dog: VariantCreator<...>;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},">"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"import"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) const variant: {\n    <VM extends RawVariant>(template: GenericTemplate<VM>): Identity<GenericVariantRecord<VM, "type">>;\n    <VM_1 extends RawVariant>(template: VM_1): Identity<...>;\n    <T extends string | VariantCreator<...>>(template: T[]): Identity<...>;\n}\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\n\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) function fields<T extends {}>(defaults?: Partial<T>): (...args: {} extends T ? ([input: T] | []) : [input: T]) => T\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<...>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"from"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"variant"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const LandAnimal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"LandAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) variant<{\n    cat: (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    };\n    dog: (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    };\n    snake: (name: string, pattern?: string) => {\n        ...;\n    };\n}>(template: {\n    cat: (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    };\n    dog: (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    };\n    snake: (name: string, pattern?: string) => {\n        ...;\n    };\n}): {\n    ...;\n} (+2 overloads)\nimport variant"},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) cat: (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}"},"cat"),": ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\n\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    furnitureDamaged: number;\n}>(defaults?: Partial<{\n    name: string;\n    furnitureDamaged: number;\n}> | undefined): (input: {\n    name: string;\n    furnitureDamaged: number;\n}) => {\n    name: string;\n    furnitureDamaged: number;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"number"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) dog: (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}"},"dog"),": ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\n\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    favoriteBall?: string | undefined;\n}>(defaults?: Partial<{\n    name: string;\n    favoriteBall?: string | undefined;\n}> | undefined): (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    name: string;\n    favoriteBall?: string | undefined;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) favoriteBall?: string | undefined"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"?:"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) snake: (name: string, pattern?: string) => {\n    name: string;\n    pattern: string;\n}"},"snake"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"striped"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type LandAnimal = {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"LandAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<...>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const LandAnimal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"LandAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const AirAnimal: {\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n}'},"AirAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(alias) variant<{\n    bat: (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    };\n    bird: (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    };\n}>(template: {\n    bat: (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    };\n    bird: (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    };\n}): {\n    ...;\n} (+2 overloads)\nimport variant"},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) bat: (input: {\n    name: string;\n    favoriteFruit: string;\n}) => {\n    name: string;\n    favoriteFruit: string;\n}"},"bat"),": ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\n\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    favoriteFruit: string;\n}>(defaults?: Partial<{\n    name: string;\n    favoriteFruit: string;\n}> | undefined): (input: {\n    name: string;\n    favoriteFruit: string;\n}) => {\n    name: string;\n    favoriteFruit: string;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) favoriteFruit: string"},"favoriteFruit")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) bird: (input: {\n    name: string;\n    featherColor: string;\n}) => {\n    name: string;\n    featherColor: string;\n}"},"bird"),": ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\n\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    featherColor: string;\n}>(defaults?: Partial<{\n    name: string;\n    featherColor: string;\n}> | undefined): (input: {\n    name: string;\n    featherColor: string;\n}) => {\n    name: string;\n    featherColor: string;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) featherColor: string"},"featherColor")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type AirAnimal = {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    type: "bird";\n    name: string;\n    featherColor: string;\n}'},"AirAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<...>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const AirAnimal: {\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n}'},"AirAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n    cat: VariantCreator<...>;\n    dog: VariantCreator<...>;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) variant<{\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n    cat: VariantCreator<...>;\n    dog: VariantCreator<...>;\n    snake: VariantCreator<...>;\n}>(template: {\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n    cat: VariantCreator<...>;\n    dog: VariantCreator<...>;\n    snake: VariantCreator<...>;\n}): {\n    ...;\n} (+2 overloads)\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"..."),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const LandAnimal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"LandAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"..."),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const AirAnimal: {\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n}'},"AirAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal = {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} | {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    type: "bird";\n    name: string;\n    featherColor: string;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<...>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n    cat: VariantCreator<...>;\n    dog: VariantCreator<...>;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">")))))),(0,s.kt)("p",null,"Let's assume the existence of two functions\u2014",(0,s.kt)("inlineCode",{parentName:"p"},"describeLandAnimal")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"describeAirAnimal"),"."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"declare"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"function"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"function describeLandAnimal(animal: LandAnimal): string"},"describeLandAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type LandAnimal = {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"LandAnimal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"declare"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"function"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"function describeAirAnimal(animal: AirAnimal): string"},"describeAirAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    type: "bird";\n    name: string;\n    featherColor: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type AirAnimal = {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    type: "bird";\n    name: string;\n    featherColor: string;\n}'},"AirAnimal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"function"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"function describeAnimal(animal: Animal): string"},"describeAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} | {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    ...;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal = {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} | {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    ...;\n}'},"Animal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"return"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} | {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    ...;\n}, string>(target: string | ... 4 more ... | {\n    ...;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} | {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    ...;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; } | { type: "bat"; name: string; favoriteFruit: string; } | { ...; }, "type", {}>.when<TypesOf<{\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}>, (animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string>(variations: TypesOf<...> | TypesOf<...>[], handler: (animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string): Matcher<...> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) types<{\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}>(content: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}): TypesOf<...>[] (+2 overloads)\nimport types'},"types")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const LandAnimal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"LandAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"), "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'function describeLandAnimal(animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): string'},"describeLandAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; } | { type: "bat"; name: string; favoriteFruit: string; } | { ...; }, "type", Record<...>>.when<TypesOf<{\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n}>, (animal: {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    ...;\n}) => string>(variations: TypesOf<...> | TypesOf<...>[], handler: (animal: {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    ...;\n}) => string): Matcher<...> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) types<{\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n}>(content: {\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n}): TypesOf<...>[] (+2 overloads)\nimport types'},"types")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const AirAnimal: {\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n}'},"AirAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"), "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'function describeAirAnimal(animal: {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    ...;\n}): string'},"describeAirAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; } | { type: "bat"; name: string; favoriteFruit: string; } | { ...; }, "type", Record<...> & Record<...>>.complete: (options?: CompleteOptions | undefined) => string'},"complete")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"()")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"declare"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"function"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"function describeLandAnimal(animal: LandAnimal): string"},"describeLandAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type LandAnimal = {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"LandAnimal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"declare"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"function"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"function describeAirAnimal(animal: AirAnimal): string"},"describeAirAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    type: "bird";\n    name: string;\n    featherColor: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type AirAnimal = {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    type: "bird";\n    name: string;\n    featherColor: string;\n}'},"AirAnimal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"export"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"function"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"function describeAnimal(animal: Animal): string"},"describeAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} | {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    ...;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal = {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} | {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    ...;\n}'},"Animal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"return"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} | {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    ...;\n}, string>(target: string | ... 4 more ... | {\n    ...;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} | {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    ...;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; } | { type: "bat"; name: string; favoriteFruit: string; } | { ...; }, "type", {}>.when<TypesOf<{\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}>, (animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string>(variations: TypesOf<...> | TypesOf<...>[], handler: (animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string): Matcher<...> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) types<{\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}>(content: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}): TypesOf<...>[] (+2 overloads)\nimport types'},"types")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const LandAnimal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"LandAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'function describeLandAnimal(animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): string'},"describeLandAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; } | { type: "bat"; name: string; favoriteFruit: string; } | { ...; }, "type", Record<...>>.when<TypesOf<{\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n}>, (animal: {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    ...;\n}) => string>(variations: TypesOf<...> | TypesOf<...>[], handler: (animal: {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    ...;\n}) => string): Matcher<...> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) types<{\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n}>(content: {\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n}): TypesOf<...>[] (+2 overloads)\nimport types'},"types")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const AirAnimal: {\n    bat: VariantCreator<"bat", (input: {\n        name: string;\n        favoriteFruit: string;\n    }) => {\n        name: string;\n        favoriteFruit: string;\n    }, "type">;\n    bird: VariantCreator<"bird", (input: {\n        name: string;\n        featherColor: string;\n    }) => {\n        name: string;\n        featherColor: string;\n    }, "type">;\n}'},"AirAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'function describeAirAnimal(animal: {\n    type: "bat";\n    name: string;\n    favoriteFruit: string;\n} | {\n    ...;\n}): string'},"describeAirAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; } | { type: "bat"; name: string; favoriteFruit: string; } | { ...; }, "type", Record<...> & Record<...>>.complete: (options?: CompleteOptions | undefined) => string'},"complete")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"()")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}")))))),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"describeAnimal")," function becomes a dispatcher, delegating the specific logic for subsets of the union to smaller functions tailored to them. It's quite possible that ",(0,s.kt)("inlineCode",{parentName:"p"},"describeLandAnimal")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"describeAirAnimal")," will ",(0,s.kt)("em",{parentName:"p"},"themselves")," call ",(0,s.kt)("inlineCode",{parentName:"p"},"match()")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"matcher()")," to resolve their cases. Then again, they may be using switch statements or branching ifs. As adherents of encapsulation, the implementation details are frankly none of our concern. All of the above approaches and more (lookup tables, observable mappings) will work with this library."),(0,s.kt)("p",null,"This pattern appears frequently in react and redux, where multiple smaller reducers may be organized into an overall ",(0,s.kt)("inlineCode",{parentName:"p"},"rootReducer"),"."),(0,s.kt)("h2",{id:"constants--register"},"Constants \u2014 ",(0,s.kt)("inlineCode",{parentName:"h2"},".register()")),(0,s.kt)("p",null,"A block of values can be resolved to a set of constants via ",(0,s.kt)("inlineCode",{parentName:"p"},".register()"),", a function with a similar syntax to ",(0,s.kt)("inlineCode",{parentName:"p"},".with()"),"."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const animalEmoji: (animal: Animal) => string"},"animalEmoji")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Register a series of options as a lookup table.\n\n```ts\nconst getSound = (a: Animal) => matcher(a)\n    .register({\n        cat: \'purr\',\n        dog: \'woof\',\n        snake: \'hiss\',\n    })\n    .complete()\n```\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.register<{\n    dog: string;\n    snake: string;\n}>(table: {\n    dog: string;\n    snake: string;\n}): Matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, "type", LookupTableToHandler<...>>'},"register")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) dog: string"},"dog"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'\ud83d\udc15'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) snake: string"},"snake"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'\ud83d\udc0d'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    })")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", LookupTableToHandler<{ dog: string; snake: string; }>>.when<"cat", ({ furnitureDamaged }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n}) => "\ud83d\ude3a" | "\ud83d\ude3e">(variations: "cat" | "cat"[], handler: ({ furnitureDamaged }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n}) => "\ud83d\ude3a" | "\ud83d\ude3e"): Matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, "type", LookupTableToHandler<...> & Record<...>> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'cat'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"=="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#4EADAD"}},"0"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"?"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'\ud83d\ude3a'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'\ud83d\ude3e'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", LookupTableToHandler<{ dog: string; snake: string; }> & Record<...>>.complete: (options?: CompleteOptions | undefined) => string'},"complete")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"()"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"const animalEmoji: (animal: Animal) => string"},"animalEmoji")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Register a series of options as a lookup table.\n\n```ts\nconst getSound = (a: Animal) => matcher(a)\n    .register({\n        cat: \'purr\',\n        dog: \'woof\',\n        snake: \'hiss\',\n    })\n    .complete()\n```\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.register<{\n    dog: string;\n    snake: string;\n}>(table: {\n    dog: string;\n    snake: string;\n}): Matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, "type", LookupTableToHandler<...>>'},"register")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) dog: string"},"dog"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"\ud83d\udc15"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) snake: string"},"snake"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"\ud83d\udc0d"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    }"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", LookupTableToHandler<{ dog: string; snake: string; }>>.when<"cat", ({ furnitureDamaged }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n}) => "\ud83d\ude3a" | "\ud83d\ude3e">(variations: "cat" | "cat"[], handler: ({ furnitureDamaged }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n}) => "\ud83d\ude3a" | "\ud83d\ude3e"): Matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, "type", LookupTableToHandler<...> & Record<...>> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"cat"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"0"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"?"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"\ud83d\ude3a"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"\ud83d\ude3e"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", LookupTableToHandler<{ dog: string; snake: string; }> & Record<...>>.complete: (options?: CompleteOptions | undefined) => string'},"complete")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"()")))))),(0,s.kt)("admonition",{title:"Rationale",type:"note"},(0,s.kt)("p",{parentName:"admonition"},"I registered dog (\ud83d\udc15) and snake (\ud83d\udc0d) directly, but I used ",(0,s.kt)("inlineCode",{parentName:"p"},".when()")," to handle cats because I wanted to perform some logic based on the cat's properties. Well-behaved cats will be shown smiling (\ud83d\ude3a) while cats with a history of poor behavior will frown (\ud83d\ude3e).")),(0,s.kt)("p",null,"This flexibility in approach is the beauty of matcher. "),(0,s.kt)("h2",{id:"terminals"},"Terminals"),(0,s.kt)("p",null,"A ",(0,s.kt)("strong",{parentName:"p"},"terminal")," is some matcher method that executes the handler immediately. The ideal terminal is ",(0,s.kt)("inlineCode",{parentName:"p"},".complete()")),(0,s.kt)("h3",{id:"complete"},(0,s.kt)("inlineCode",{parentName:"h3"},".complete()")),(0,s.kt)("p",null,"Through the magic of conditional types, ",(0,s.kt)("inlineCode",{parentName:"p"},".complete()")," will either pose no obstacle at all, or complain about keys."),(0,s.kt)("h3",{id:"else"},(0,s.kt)("inlineCode",{parentName:"h3"},".else()")),(0,s.kt)("p",null,"Handle the remaining cases with a function. Note that snake, since it's already been handled, is not part of the input union."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const hasScales: (animal: Animal) => boolean"},"hasScales")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.when<"snake", (_: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => boolean>(variations: "snake" | "snake"[], handler: (_: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => boolean): Matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, "type", Record<...>> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'snake'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"true"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Execute the match. If the target type has been explicitly handled, use that logic.\nOtherwise use the function passed here.\n\nThis is a **terminal** and resolves the matcher.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", Record<"snake", (_: { type: "snake"; name: string; pattern: string; }) => boolean>>.else<(_: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => boolean>(func: (_: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => boolean): boolean'},"else")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}',style:{borderBottom:"solid 2px lightgrey"}},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"false"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"meta-line"},(0,s.kt)("span",{parentName:"div",className:"popover-prefix"},"         "),(0,s.kt)("span",{parentName:"div",className:"popover"},(0,s.kt)("div",{parentName:"span",className:"arrow"}),'(parameter) _: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}'))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"const hasScales: (animal: Animal) => boolean"},"hasScales")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.when<"snake", (_: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => boolean>(variations: "snake" | "snake"[], handler: (_: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => boolean): Matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, "type", Record<...>> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"snake"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"true)")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Execute the match. If the target type has been explicitly handled, use that logic.\nOtherwise use the function passed here.\n\nThis is a **terminal** and resolves the matcher.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", Record<"snake", (_: { type: "snake"; name: string; pattern: string; }) => boolean>>.else<(_: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => boolean>(func: (_: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => boolean): boolean'},"else")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}',style:{borderBottom:"solid 2px lightgrey"}},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"false)")),(0,s.kt)("div",{parentName:"code",className:"meta-line"},(0,s.kt)("span",{parentName:"div",className:"popover-prefix"},"         "),(0,s.kt)("span",{parentName:"div",className:"popover"},(0,s.kt)("div",{parentName:"span",className:"arrow"}),'(parameter) _: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}')))))),(0,s.kt)("h3",{id:"execute"},(0,s.kt)("inlineCode",{parentName:"h3"},".execute()")),(0,s.kt)("p",null,"Immediately execute the matcher, whether or not every case has been handled. The matcher will return undefined if it runs into an unhandled case."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const ballPreference: (animal: Animal) => string | undefined"},"ballPreference")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.when<"dog", ({ favoriteBall }: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string | undefined>(variations: "dog" | "dog"[], handler: ({ favoriteBall }: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string | undefined): Matcher<...> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'dog'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) favoriteBall: string | undefined"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) favoriteBall: string | undefined"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Immediately execute the matcher. Exhaustiveness is not guaranteed.\n\nThis is a **terminal** and resolves the matcher.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", Record<"dog", ({ favoriteBall }: { type: "dog"; name: string; favoriteBall?: string | undefined; }) => string | undefined>>.execute(): string | undefined'},"execute")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"();"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"const ballPreference: (animal: Animal) => string | undefined"},"ballPreference")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle one or more cases with a set of types and a handler.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.when<"dog", ({ favoriteBall }: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string | undefined>(variations: "dog" | "dog"[], handler: ({ favoriteBall }: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string | undefined): Matcher<...> (+1 overload)'},"when")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"dog"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) favoriteBall: string | undefined"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) favoriteBall: string | undefined"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Immediately execute the matcher. Exhaustiveness is not guaranteed.\n\nThis is a **terminal** and resolves the matcher.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", Record<"dog", ({ favoriteBall }: { type: "dog"; name: string; favoriteBall?: string | undefined; }) => string | undefined>>.execute(): string | undefined'},"execute")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")))))),(0,s.kt)("p",null,"Dogs are the only case where ball preference matters, and every other case can simply resolve to void."),(0,s.kt)("h3",{id:"exhaust"},(0,s.kt)("inlineCode",{parentName:"h3"},".exhaust()")),(0,s.kt)("p",null,"Handle all remaining cases. Unlike ",(0,s.kt)("inlineCode",{parentName:"p"},".with()"),", ",(0,s.kt)("inlineCode",{parentName:"p"},".exhaust()")," is not content with one case, it requires every unhandled case be resolved then and there."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const describeLounging: (animal: Animal) => string"},"describeLounging")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle all unhandled cases and immediately execute.\n\n> **Exhaust** \u2014 to consume entirely, _Merriam-Webster_\n\nThis is a **terminal** and resolves the matcher.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.exhaust<{\n    cat: ({ furnitureDamaged }: {\n        type: "cat";\n        name: string;\n        furnitureDamaged: number;\n    }) => string;\n    dog: ({ favoriteBall }: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => string;\n    snake: ({ pattern }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}>(remainingCases: {\n    cat: ({ furnitureDamaged }: {\n        type: "cat";\n        name: string;\n        furnitureDamaged: number;\n    }) => string;\n    dog: ({ favoriteBall }: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => string;\n    snake: ({ pattern }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}): string'},"exhaust")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) cat: ({ furnitureDamaged }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n}) => string'},"cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const term: "sofa" | "carpet"'},"term")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"=="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#4EADAD"}},"0"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"?"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'sofa'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'carpet'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"return"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`preening on the "),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const term: "sofa" | "carpet"'},"term")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    },")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: ({ favoriteBall }: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) favoriteBall: string | undefined"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const ballTerm: string"},"ballTerm")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) favoriteBall: string | undefined"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"?"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) favoriteBall: string"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}}," `"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"''"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"return"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`playing with a "),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const ballTerm: string"},"ballTerm")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"ball`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    },")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: ({ pattern }: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`sunning their "),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}}," skin`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"})"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"const describeLounging: (animal: Animal) => string"},"describeLounging")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle all unhandled cases and immediately execute.\n\n> **Exhaust** \u2014 to consume entirely, _Merriam-Webster_\n\nThis is a **terminal** and resolves the matcher.\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.exhaust<{\n    cat: ({ furnitureDamaged }: {\n        type: "cat";\n        name: string;\n        furnitureDamaged: number;\n    }) => string;\n    dog: ({ favoriteBall }: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => string;\n    snake: ({ pattern }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}>(remainingCases: {\n    cat: ({ furnitureDamaged }: {\n        type: "cat";\n        name: string;\n        furnitureDamaged: number;\n    }) => string;\n    dog: ({ favoriteBall }: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => string;\n    snake: ({ pattern }: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => string;\n}): string'},"exhaust")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) cat: ({ furnitureDamaged }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n}) => string'},"cat"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const term: "sofa" | "carpet"'},"term")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"0"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"?"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"sofa"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"carpet"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"return"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"preening on the ${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const term: "sofa" | "carpet"'},"term")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    },")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: ({ favoriteBall }: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string'},"dog"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) favoriteBall: string | undefined"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const ballTerm: string"},"ballTerm")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) favoriteBall: string | undefined"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"?"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) favoriteBall: string"},"favoriteBall")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"} "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"''"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"return"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"playing with a ${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const ballTerm: string"},"ballTerm")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}ball"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    },")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: ({ pattern }: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string'},"snake"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"sunning their ${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"} skin"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")))))),(0,s.kt)("p",null,"If any cases have already been handled, they need not be included."),(0,s.kt)("admonition",{type:"warning"},(0,s.kt)("p",{parentName:"admonition"},"Code sample incoming, post ",(0,s.kt)("inlineCode",{parentName:"p"},"dev.25"))),(0,s.kt)("h3",{id:"lookup"},(0,s.kt)("inlineCode",{parentName:"h3"},".lookup()")),(0,s.kt)("p",null,"Similar to exhaust, handle every unresolved case but do so as a lookup table. This can be quite succinct in use."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const cuteName: (animal: Animal) => string"},"cuteName")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Provide an exhaustive table of the unhandled options and look up which value\nto use based on the instance.\n\nThis is a **terminal** and resolves the matcher.\n\n```ts\nconst getSound = (a: Animal) => matcher(a)\n    .lookup({\n        cat: \'purr\',\n        dog: \'woof\',\n        snake: \'hiss\',\n    })\n```\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.lookup<{\n    cat: string;\n    dog: string;\n    snake: string;\n}>(table: {\n    cat: string;\n    dog: string;\n    snake: string;\n}): string'},"lookup")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) cat: string"},"cat"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'kitty'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) dog: string"},"dog"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'puppy'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) snake: string"},"snake"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'snek'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"})")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const cutie: string"},"cutie")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const cuteName: (animal: Animal) => string"},"cuteName")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Twix'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"})); "),(0,s.kt)("span",{parentName:"div",style:{color:"#506565"}},"// puppy"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"const cuteName: (animal: Animal) => string"},"cuteName")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) matcher<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, string>(target: string | {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}): Matcher<...>\nimport matcher'},"matcher")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Provide an exhaustive table of the unhandled options and look up which value\nto use based on the instance.\n\nThis is a **terminal** and resolves the matcher.\n\n```ts\nconst getSound = (a: Animal) => matcher(a)\n    .lookup({\n        cat: \'purr\',\n        dog: \'woof\',\n        snake: \'hiss\',\n    })\n```\n\n(method) Matcher<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }, "type", {}>.lookup<{\n    cat: string;\n    dog: string;\n    snake: string;\n}>(table: {\n    cat: string;\n    dog: string;\n    snake: string;\n}): string'},"lookup")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) cat: string"},"cat"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"kitty"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) dog: string"},"dog"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"puppy"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) snake: string"},"snake"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"snek"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const cutie: string"},"cutie")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"const cuteName: (animal: Animal) => string"},"cuteName")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const Animal: {\n    cat: VariantCreator<"cat", (input: {\n        name: string;\n        furnitureDamaged: number;\n    }) => {\n        name: string;\n        furnitureDamaged: number;\n    }, "type">;\n    dog: VariantCreator<"dog", (input: {\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => {\n        name: string;\n        favoriteBall?: string | undefined;\n    }, "type">;\n    snake: VariantCreator<...>;\n}'},"Animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: (input: {\n    name: string;\n    favoriteBall?: string | undefined;\n}) => {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Twix"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"))"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"; "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"//"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," puppy")))))),(0,s.kt)("p",null,"If any cases have already been handled, they need not be included."),(0,s.kt)("admonition",{type:"warning"},(0,s.kt)("p",{parentName:"admonition"},"Code sample incoming, post ",(0,s.kt)("inlineCode",{parentName:"p"},"dev.25"))))}F.isMDXComponent=!0}}]);