"use strict";(self.webpackChunkvariant_site=self.webpackChunkvariant_site||[]).push([[8354],{3905:function(e,a,n){n.d(a,{Zo:function(){return m},kt:function(){return y}});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function p(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?s(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=t.createContext({}),i=function(e){var a=t.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):p(p({},a),e)),n},m=function(e){var a=i(e.components);return t.createElement(l.Provider,{value:a},e.children)},d="mdxType",F={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},c=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=i(n),c=r,y=d["".concat(l,".").concat(c)]||d[c]||F[c]||s;return n?t.createElement(y,p(p({ref:a},m),{},{components:n})):t.createElement(y,p({ref:a},m))}));function y(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=n.length,p=new Array(s);p[0]=c;var o={};for(var l in a)hasOwnProperty.call(a,l)&&(o[l]=a[l]);o.originalType=e,o[d]="string"==typeof e?e:r,p[1]=o;for(var i=2;i<s;i++)p[i]=n[i];return t.createElement.apply(null,p)}return t.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8103:function(e,a,n){n.r(a),n.d(a,{assets:function(){return m},contentTitle:function(){return l},default:function(){return y},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return d}});var t=n(3117),r=n(102),s=(n(7294),n(3905)),p=["components"],o={title:"Match"},l=void 0,i={unversionedId:"book/match",id:"book/match",title:"Match",description:"Pattern matching is the crown jewel of variant types. Like the traditional switch statement, a match expression can process some arbitrary variant with special handling based on its type at runtime. Unlike a switch statement, matches are expressions and they are exhaustive by default. As expressions, matches can be used inline as the results of expression-bodied lambdas, JSX attributes, and more. As exhaustive handlers, matches can be assumed to resolve.",source:"@site/docs/book/match.md",sourceDirName:"book",slug:"/book/match",permalink:"/variant/docs/next/book/match",draft:!1,tags:[],version:"current",frontMatter:{title:"Match"},sidebar:"someSidebar",previous:{title:"Organization",permalink:"/variant/docs/next/book/organization"},next:{title:"Matcher",permalink:"/variant/docs/next/book/matcher"}},m={},d=[{value:"Matching Literals",id:"matching-literals",level:2},{value:"Partial matching",id:"partial-matching",level:2},{value:"Better typed partial matching",id:"better-typed-partial-matching",level:3},{value:"Returning a constant",id:"returning-a-constant",level:2},{value:"Inline matching",id:"inline-matching",level:2},{value:"Special Cases",id:"special-cases",level:2},{value:"Matching scoped variants.",id:"matching-scoped-variants",level:3},{value:"Prematching",id:"prematching",level:3},{value:"Unpack",id:"unpack",level:3}],F={toc:d},c="wrapper";function y(e){var a=e.components,n=(0,r.Z)(e,p);return(0,s.kt)(c,(0,t.Z)({},F,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("div",{className:"shiki-twoslash-fragment"}),(0,s.kt)("p",null,"Pattern matching is the crown jewel of variant types. Like the traditional switch statement, a match expression can process some arbitrary variant with special handling based on its type at runtime. Unlike a switch statement, matches are expressions and they are ",(0,s.kt)("strong",{parentName:"p"},"exhaustive")," by default. As expressions, matches can be used inline as the results of expression-bodied lambdas, JSX attributes, and more. As exhaustive handlers, matches can be assumed to resolve. "),(0,s.kt)("p",null,"The most direct use of the match expression requires an instance and a handler object."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const rivalWantsAnimal: (animal: Animal) => boolean"},"rivalWantsAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Match an instance of a variant or literal union against its possible cases.\n\n(alias) match<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, {\n    dog: (_: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => boolean;\n    cat: ({ furnitureDamaged }: {\n        ...;\n    }) => boolean;\n    snake: (_: {\n        ...;\n    }) => boolean;\n}, string>(target: string | ... 2 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, handler: {\n    dog: (_: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => boolean;\n    cat: ({ furnitureDamaged }: {\n        ...;\n    }) => boolean;\n    snake: (_: {\n        ...;\n    }) => boolean;\n} | ((t: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => {\n    dog: (_: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => boolean;\n    cat: ({ furnitureDamaged }: {\n        ...;\n    }) => boolean;\n    snake: (_: {\n        ...;\n    }) => boolean;\n})): boolean (+3 overloads)\nimport match'},"match")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: (_: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => boolean'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"false"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#506565"}},"// allergic to dogs")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) cat: ({ furnitureDamaged }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n}) => boolean'},"cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#4EADAD"}},"3"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#506565"}},"// some cats")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: (_: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => boolean'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"true"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#506565"}},"// snakes are cool")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"})"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"const rivalWantsAnimal: (animal: Animal) => boolean"},"rivalWantsAnimal")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Match an instance of a variant or literal union against its possible cases.\n\n(alias) match<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, {\n    dog: (_: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => boolean;\n    cat: ({ furnitureDamaged }: {\n        ...;\n    }) => boolean;\n    snake: (_: {\n        ...;\n    }) => boolean;\n}, string>(target: string | ... 2 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, handler: {\n    dog: (_: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => boolean;\n    cat: ({ furnitureDamaged }: {\n        ...;\n    }) => boolean;\n    snake: (_: {\n        ...;\n    }) => boolean;\n} | ((t: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => {\n    dog: (_: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => boolean;\n    cat: ({ furnitureDamaged }: {\n        ...;\n    }) => boolean;\n    snake: (_: {\n        ...;\n    }) => boolean;\n})): boolean (+3 overloads)\nimport match'},"match")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: (_: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => boolean'},"dog"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"false"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"//"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," allergic to dogs")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) cat: ({ furnitureDamaged }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n}) => boolean'},"cat"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"3"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"//"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," some cats")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: (_: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => boolean'},"snake"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"true"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"//"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," snakes are cool")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")))))),(0,s.kt)("p",null,"This handler object requires a property for each case of a variant where the key equals the type literal and the value is a function that handles that type of variant."),(0,s.kt)("h2",{id:"matching-literals"},"Matching Literals"),(0,s.kt)("p",null,"Match can be used on any valid string literal union. These can be generated simply with ",(0,s.kt)("inlineCode",{parentName:"p"},"catalog()")," or may come from other libraries."),(0,s.kt)("p",null,"Imagine a ",(0,s.kt)("inlineCode",{parentName:"p"},"colorMode")," variable, a string ",(0,s.kt)("inlineCode",{parentName:"p"},"'dark' | 'light'"),". As a union, it can be processed with match."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"result"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"match"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"colorMode"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"dark"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"_"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"..."),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"light"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"_"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"..."),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"});"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"result"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," match"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"colorMode"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    dark: "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"_"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"..."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    light: "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"_"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"..."),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")))))),(0,s.kt)("h2",{id:"partial-matching"},"Partial matching"),(0,s.kt)("p",null,"Use the ",(0,s.kt)("inlineCode",{parentName:"p"},"partial()")," helper function."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const hasFur: boolean"},"hasFur")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Match an instance of a variant or literal union against its possible cases.\n\n(alias) match<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, HandlerFromPartial<{\n    snake: (_: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => boolean;\n    default: (_: {\n        ...;\n    } | ... 1 more ... | {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => boolean;\n}, "cat" | ... 1 more ... | "snake">, string>(target: string | ... 2 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, handler: HandlerFromPartial<...> | ((t: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => HandlerFromPartial<...>)): boolean (+3 overloads)\nimport match'},"match")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'var animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle some cases, use **`default:`** to handle the remainder (Active).\n\n(alias) partial<{\n    snake: (_: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => boolean;\n    default: (_: {\n        ...;\n    } | ... 1 more ... | {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => boolean;\n}, {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}>(handler: {\n    snake: (_: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => boolean;\n    default: (_: {\n        ...;\n    } | ... 1 more ... | {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => boolean;\n} | ((t: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => {\n    snake: (_: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => boolean;\n    default: (_: {\n        ...;\n    } | ... 1 more ... | {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => boolean;\n})): (input: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => HandlerFromPartial<...> (+1 overload)\nimport partial'},"partial")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: (_: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => boolean'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"false"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) default: (_: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => boolean'},"default")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"true"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}));"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const hasFur: boolean"},"hasFur")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Match an instance of a variant or literal union against its possible cases.\n\n(alias) match<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, HandlerFromPartial<{\n    snake: (_: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => boolean;\n    default: (_: {\n        ...;\n    } | ... 1 more ... | {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => boolean;\n}, "cat" | ... 1 more ... | "snake">, string>(target: string | ... 2 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, handler: HandlerFromPartial<...> | ((t: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => HandlerFromPartial<...>)): boolean (+3 overloads)\nimport match'},"match")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'var animal: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Handle some cases, use **`default:`** to handle the remainder (Active).\n\n(alias) partial<{\n    snake: (_: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => boolean;\n    default: (_: {\n        ...;\n    } | ... 1 more ... | {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => boolean;\n}, {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}>(handler: {\n    snake: (_: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => boolean;\n    default: (_: {\n        ...;\n    } | ... 1 more ... | {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => boolean;\n} | ((t: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => {\n    snake: (_: {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => boolean;\n    default: (_: {\n        ...;\n    } | ... 1 more ... | {\n        type: "snake";\n        name: string;\n        pattern: string;\n    }) => boolean;\n})): (input: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => HandlerFromPartial<...> (+1 overload)\nimport partial'},"partial")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: (_: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => boolean'},"snake"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"false"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) default: (_: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => boolean'},"default"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"true"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"))"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")))))),(0,s.kt)("h3",{id:"better-typed-partial-matching"},"Better typed partial matching"),(0,s.kt)("p",null,"Use the ",(0,s.kt)("inlineCode",{parentName:"p"},"otherwise(partialHandler, restHandler)")," helper function. In this utility, the input to the default clause will be better typed. Specifically, it will exclude the items that the handler has already resolved. Notice that in this code sample, snake is absent from the input type."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"hasFur"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"match"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"otherwise"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"snake"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"_"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"false"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}, "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"_"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"true"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"));"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"hasFur"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," match"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", otherwise"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{snake: "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"_"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"false"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}, "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"_"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"true))"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")))))),(0,s.kt)("h2",{id:"returning-a-constant"},"Returning a constant"),(0,s.kt)("p",null,"Frequently typing ",(0,s.kt)("inlineCode",{parentName:"p"},"() => value")," may be tedious or even painful for some developers."),(0,s.kt)("p",null,"For a single case, use the functions ",(0,s.kt)("inlineCode",{parentName:"p"},"constant(value)")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"just(value)")," as an alternative to ",(0,s.kt)("inlineCode",{parentName:"p"},"() => value"),"/",(0,s.kt)("inlineCode",{parentName:"p"},"_ => value"),"."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"emoji"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," Animal) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"match"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    cat: "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"constant"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'\ud83d\udc31'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    dog: "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"constant"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'\ud83d\udc15'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    snake: "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"constant"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'\ud83d\udc0d'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"})"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," emoji "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Animal)"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," match"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    cat: constant"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"\ud83d\udc31"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    dog: constant"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"\ud83d\udc15"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    snake: constant"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"\ud83d\udc0d"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")))))),(0,s.kt)("p",null,"If every case will be handled by returning a constant value, for example in a lookup table, use the ",(0,s.kt)("inlineCode",{parentName:"p"},"lookup()")," helper function."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"emoji"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," Animal) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"match"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"lookup"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    cat: "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'\ud83d\udc31'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    dog: "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'\ud83d\udc15'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    snake: "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'\ud83d\udc0d'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}))"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," emoji "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Animal)"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," match"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", lookup"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    cat: "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"\ud83d\udc31"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    dog: "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"\ud83d\udc15"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    snake: "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"\ud83d\udc0d"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"))")))))),(0,s.kt)("h2",{id:"inline-matching"},"Inline matching"),(0,s.kt)("p",null,"There's a point-free syntax available for match, allowing it to be used as a higher order function when in a properly constrained context. If match can infer what it's required to handle, it can provide autocompletion and exhaustiveness checking for the remaining options."),(0,s.kt)("p",null,"One of the motivating instance was in processing a promise chain. "),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"declare"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"function"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"function getAnimal(): Promise<Animal>"},"getAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"()"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"Represents the completion of an asynchronous operation\n\ninterface Promise<T>"},"Promise"),"<",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),">;")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const message: Promise<string>"},"message")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"function getAnimal(): Promise<Animal>"},"getAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"()")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Attaches callbacks for the resolution and/or rejection of the Promise.\n\n(method) Promise<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }>.then<string, never>(onfulfilled?: ((value: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string | PromiseLike<...>) | null | undefined, onrejected?: ((reason: any) => PromiseLike<...>) | ... 1 more ... | undefined): Promise<...>'},"then")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'**(inline)** Match an instance of a variant or literal union against its possible cases.\n\n(alias) match<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, {\n    dog: (_: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => string;\n    cat: ({ furnitureDamaged }: {\n        ...;\n    }) => string;\n    snake: ({ name, pattern }: {\n        ...;\n    }) => string;\n}, string>(handler: {\n    dog: (_: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => string;\n    cat: ({ furnitureDamaged }: {\n        ...;\n    }) => string;\n    snake: ({ name, pattern }: {\n        ...;\n    }) => string;\n} | ((t: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => {\n    dog: (_: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => string;\n    cat: ({ furnitureDamaged }: {\n        ...;\n    }) => string;\n    snake: ({ name, pattern }: {\n        ...;\n    }) => string;\n})): (instance: string | ... 2 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string (+3 overloads)\nimport match'},"match")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: (_: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string'},"dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`Get a doggy bed`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) cat: ({ furnitureDamaged }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n}) => string'},"cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"            "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const really: " really" | ""'},"really")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},">"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#4EADAD"}},"3")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"                "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"?"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"' really'")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"                "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"''")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"            ;")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"            "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"return"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`You should"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const really: " really" | ""'},"really")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}}," buy a cat tree`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        },")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"        "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: ({ name, pattern }: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string'},"snake")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`Buy a terrarium`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    }));"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"declare"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"function"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"function getAnimal(): Promise<Animal>"},"getAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"()"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Represents the completion of an asynchronous operation\n\ninterface Promise<T>"},"Promise"),"<",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type Animal<T extends TypeNames<{ cat: VariantCreator<"cat", (input: { name: string; furnitureDamaged: number; }) => { name: string; furnitureDamaged: number; }, "type">; dog: VariantCreator<"dog", (input: { name: string; favoriteBall?: string | undefined; }) => { name: string; favoriteBall?: string | undefined; }, "type">; snake: VariantCreator<...>; }> = undefined> = T extends undefined ? {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n} : T extends TypesOf<...> ? Extract<...> | ... 1 more ... | Extract<...> : {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}'},"Animal"),">"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const message: Promise<string>"},"message")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"function getAnimal(): Promise<Animal>"},"getAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"()")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    .",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Attaches callbacks for the resolution and/or rejection of the Promise.\n\n(method) Promise<{ type: "cat"; name: string; furnitureDamaged: number; } | { type: "dog"; name: string; favoriteBall?: string | undefined; } | { type: "snake"; name: string; pattern: string; }>.then<string, never>(onfulfilled?: ((value: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string | PromiseLike<...>) | null | undefined, onrejected?: ((reason: any) => PromiseLike<...>) | ... 1 more ... | undefined): Promise<...>'},"then")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'**(inline)** Match an instance of a variant or literal union against its possible cases.\n\n(alias) match<{\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n} | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}, {\n    dog: (_: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => string;\n    cat: ({ furnitureDamaged }: {\n        ...;\n    }) => string;\n    snake: ({ name, pattern }: {\n        ...;\n    }) => string;\n}, string>(handler: {\n    dog: (_: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => string;\n    cat: ({ furnitureDamaged }: {\n        ...;\n    }) => string;\n    snake: ({ name, pattern }: {\n        ...;\n    }) => string;\n} | ((t: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n} | ... 1 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => {\n    dog: (_: {\n        type: "dog";\n        name: string;\n        favoriteBall?: string | undefined;\n    }) => string;\n    cat: ({ furnitureDamaged }: {\n        ...;\n    }) => string;\n    snake: ({ name, pattern }: {\n        ...;\n    }) => string;\n})): (instance: string | ... 2 more ... | {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string (+3 overloads)\nimport match'},"match")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) dog: (_: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}) => string'},"dog"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) _: {\n    type: "dog";\n    name: string;\n    favoriteBall?: string | undefined;\n}'},"_")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Get a doggy bed"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) cat: ({ furnitureDamaged }: {\n    type: "cat";\n    name: string;\n    furnitureDamaged: number;\n}) => string'},"cat"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"            "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const really: " really" | ""'},"really")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) furnitureDamaged: number"},"furnitureDamaged")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"3")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"                "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"?"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}}," really"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"                "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"''")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"            ;")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"            "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"return"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"You should${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const really: " really" | ""'},"really")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"} buy a cat tree"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        },")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"        ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) snake: ({ name, pattern }: {\n    type: "snake";\n    name: string;\n    pattern: string;\n}) => string'},"snake"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(parameter) pattern: string"},"pattern")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Buy a terrarium"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    }"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"))"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")))))),(0,s.kt)("p",null,"But inline matching can also be used in situations like the array functions ",(0,s.kt)("inlineCode",{parentName:"p"},".filter"),", ",(0,s.kt)("inlineCode",{parentName:"p"},".some"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},".map"),"."),(0,s.kt)("p",null,"Combine this with partial matching to do something like:"),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"}))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"})))),(0,s.kt)("h2",{id:"special-cases"},"Special Cases"),(0,s.kt)("h3",{id:"matching-scoped-variants"},"Matching scoped variants."),(0,s.kt)("p",null,"Use the ",(0,s.kt)("inlineCode",{parentName:"p"},"descope()")," function to remove the scope section, allowing the handler to work with the more friendly names."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ScopedAnimal: {\n    Cat: VariantCreator<"Animal/Cat", (input: {\n        name: string;\n    }) => {\n        name: string;\n    }, "type">;\n    Dog: VariantCreator<"Animal/Dog", (input: {\n        name: string;\n        toy?: string | undefined;\n    }) => {\n        name: string;\n        toy?: string | undefined;\n    }, "type">;\n}'},"ScopedAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) scoped<{\n    Cat: (input: {\n        name: string;\n    }) => {\n        name: string;\n    };\n    Dog: (input: {\n        name: string;\n        toy?: string | undefined;\n    }) => {\n        name: string;\n        toy?: string | undefined;\n    };\n}, "Animal">(scope: "Animal", v: {\n    Cat: (input: {\n        name: string;\n    }) => {\n        name: string;\n    };\n    Dog: (input: {\n        name: string;\n        toy?: string | undefined;\n    }) => {\n        name: string;\n        toy?: string | undefined;\n    };\n}): {\n    ...;\n}\nimport scoped'},"scoped")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Animal'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) Cat: (input: {\n    name: string;\n}) => {\n    name: string;\n}"},"Cat"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\n\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n}>(defaults?: Partial<{\n    name: string;\n}> | undefined): (input: {\n    name: string;\n}) => {\n    name: string;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"<{",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}>(),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) Dog: (input: {\n    name: string;\n    toy?: string | undefined;\n}) => {\n    name: string;\n    toy?: string | undefined;\n}"},"Dog"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\n\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    toy?: string | undefined;\n}>(defaults?: Partial<{\n    name: string;\n    toy?: string | undefined;\n}> | undefined): (input: {\n    name: string;\n    toy?: string | undefined;\n}) => {\n    name: string;\n    toy?: string | undefined;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"<{",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) toy?: string | undefined"},"toy")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"?:"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}>(),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"});")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type ScopedAnimal<T extends TypeNames<{ Cat: VariantCreator<"Animal/Cat", (input: { name: string; }) => { name: string; }, "type">; Dog: VariantCreator<"Animal/Dog", (input: { name: string; toy?: string | undefined; }) => { name: string; toy?: string | undefined; }, "type">; }> = undefined> = T extends undefined ? {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n} : T extends TypesOf<{\n    Cat: VariantCreator<"Animal/Cat", (input: {\n        name: string;\n    }) => {\n        name: string;\n    }, "type">;\n    Dog: VariantCreator<"Animal/Dog", (input: {\n        name: string;\n        toy?: string | undefined;\n    }) => {\n        name: string;\n        toy?: string | undefined;\n    }, "type">;\n}> ? Extract<...> | Extract<...> : {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}'},"ScopedAnimal"),"<",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(type parameter) T in type ScopedAnimal<T extends TypeNames<{ Cat: VariantCreator<"Animal/Cat", (input: { name: string; }) => { name: string; }, "type">; Dog: VariantCreator<"Animal/Dog", (input: { name: string; toy?: string | undefined; }) => { name: string; toy?: string | undefined; }, "type">; }> = undefined>'},"T")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"extends"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"Get the literal union for a variant type's names, plus `undefined`.\n\n(alias) type TypeNames<T extends VariantModule<string>> = TypesOf<T> | undefined\nimport TypeNames"},"TypeNames"),"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ScopedAnimal: {\n    Cat: VariantCreator<"Animal/Cat", (input: {\n        name: string;\n    }) => {\n        name: string;\n    }, "type">;\n    Dog: VariantCreator<"Animal/Dog", (input: {\n        name: string;\n        toy?: string | undefined;\n    }) => {\n        name: string;\n        toy?: string | undefined;\n    }, "type">;\n}'},"ScopedAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"> "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"undefined"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"> "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<...>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf"),"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ScopedAnimal: {\n    Cat: VariantCreator<"Animal/Cat", (input: {\n        name: string;\n    }) => {\n        name: string;\n    }, "type">;\n    Dog: VariantCreator<"Animal/Dog", (input: {\n        name: string;\n        toy?: string | undefined;\n    }) => {\n        name: string;\n        toy?: string | undefined;\n    }, "type">;\n}'},"ScopedAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(type parameter) T in type ScopedAnimal<T extends TypeNames<{ Cat: VariantCreator<"Animal/Cat", (input: { name: string; }) => { name: string; }, "type">; Dog: VariantCreator<"Animal/Dog", (input: { name: string; toy?: string | undefined; }) => { name: string; toy?: string | undefined; }, "type">; }> = undefined>'},"T"),">;")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const cat: {\n    type: "Animal/Cat";\n    name: string;\n}'},"cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ScopedAnimal: {\n    Cat: VariantCreator<"Animal/Cat", (input: {\n        name: string;\n    }) => {\n        name: string;\n    }, "type">;\n    Dog: VariantCreator<"Animal/Dog", (input: {\n        name: string;\n        toy?: string | undefined;\n    }) => {\n        name: string;\n        toy?: string | undefined;\n    }, "type">;\n}'},"ScopedAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) Cat: (input: {\n    name: string;\n}) => {\n    type: "Animal/Cat";\n    name: string;\n}'},"Cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Perseus'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"});")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const rating: (animal: ScopedAnimal) => number"},"rating")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type ScopedAnimal<T extends TypeNames<{ Cat: VariantCreator<"Animal/Cat", (input: { name: string; }) => { name: string; }, "type">; Dog: VariantCreator<"Animal/Dog", (input: { name: string; toy?: string | undefined; }) => { name: string; toy?: string | undefined; }, "type">; }> = undefined> = T extends undefined ? {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n} : T extends TypesOf<{\n    Cat: VariantCreator<"Animal/Cat", (input: {\n        name: string;\n    }) => {\n        name: string;\n    }, "type">;\n    Dog: VariantCreator<"Animal/Dog", (input: {\n        name: string;\n        toy?: string | undefined;\n    }) => {\n        name: string;\n        toy?: string | undefined;\n    }, "type">;\n}> ? Extract<...> | Extract<...> : {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}'},"ScopedAnimal"),") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Match an instance of a variant or literal union against its possible cases.\n\n(alias) match<{\n    name: string;\n    type: "Cat";\n} | {\n    name: string;\n    toy?: string | undefined;\n    type: "Dog";\n}, {\n    Cat: (c: {\n        name: string;\n        type: "Cat";\n    }) => number;\n    Dog: (d: {\n        name: string;\n        toy?: string | undefined;\n        type: "Dog";\n    }) => number;\n}, string>(target: string | ... 1 more ... | {\n    name: string;\n    toy?: string | undefined;\n    type: "Dog";\n}, handler: {\n    Cat: (c: {\n        name: string;\n        type: "Cat";\n    }) => number;\n    Dog: (d: {\n        name: string;\n        toy?: string | undefined;\n        type: "Dog";\n    }) => number;\n} | ((t: {\n    name: string;\n    type: "Cat";\n} | {\n    name: string;\n    toy?: string | undefined;\n    type: "Dog";\n}) => {\n    Cat: (c: {\n        name: string;\n        type: "Cat";\n    }) => number;\n    Dog: (d: {\n        name: string;\n        toy?: string | undefined;\n        type: "Dog";\n    }) => number;\n})): number (+3 overloads)\nimport match'},"match")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) descope<{\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}>(target: {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}): {\n    name: string;\n    type: "Cat";\n} | {\n    name: string;\n    toy?: string | undefined;\n    type: "Dog";\n}\nimport descope'},"descope")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"), {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) Cat: (c: {\n    name: string;\n    type: "Cat";\n}) => number'},"Cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) c: {\n    name: string;\n    type: "Cat";\n}'},"c")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#4EADAD"}},"1"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) Dog: (d: {\n    name: string;\n    toy?: string | undefined;\n    type: "Dog";\n}) => number'},"Dog")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) d: {\n    name: string;\n    toy?: string | undefined;\n    type: "Dog";\n}'},"d")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#4EADAD"}},"2"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"})"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ScopedAnimal: {\n    Cat: VariantCreator<"Animal/Cat", (input: {\n        name: string;\n    }) => {\n        name: string;\n    }, "type">;\n    Dog: VariantCreator<"Animal/Dog", (input: {\n        name: string;\n        toy?: string | undefined;\n    }) => {\n        name: string;\n        toy?: string | undefined;\n    }, "type">;\n}'},"ScopedAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) scoped<{\n    Cat: (input: {\n        name: string;\n    }) => {\n        name: string;\n    };\n    Dog: (input: {\n        name: string;\n        toy?: string | undefined;\n    }) => {\n        name: string;\n        toy?: string | undefined;\n    };\n}, "Animal">(scope: "Animal", v: {\n    Cat: (input: {\n        name: string;\n    }) => {\n        name: string;\n    };\n    Dog: (input: {\n        name: string;\n        toy?: string | undefined;\n    }) => {\n        name: string;\n        toy?: string | undefined;\n    };\n}): {\n    ...;\n}\nimport scoped'},"scoped")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) Cat: (input: {\n    name: string;\n}) => {\n    name: string;\n}"},"Cat"),": ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\n\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n}>(defaults?: Partial<{\n    name: string;\n}> | undefined): (input: {\n    name: string;\n}) => {\n    name: string;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) Dog: (input: {\n    name: string;\n    toy?: string | undefined;\n}) => {\n    name: string;\n    toy?: string | undefined;\n}"},"Dog"),": ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"Describe the fields of the variation.\n\nWhen used creates a function of type `(input: T) => T & {type: 'literal'}`\n\n(alias) fields<{\n    name: string;\n    toy?: string | undefined;\n}>(defaults?: Partial<{\n    name: string;\n    toy?: string | undefined;\n}> | undefined): (input: {\n    name: string;\n    toy?: string | undefined;\n}) => {\n    name: string;\n    toy?: string | undefined;\n}\nimport fields"},"fields")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) toy?: string | undefined"},"toy")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"?:"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"string"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type ScopedAnimal<T extends TypeNames<{ Cat: VariantCreator<"Animal/Cat", (input: { name: string; }) => { name: string; }, "type">; Dog: VariantCreator<"Animal/Dog", (input: { name: string; toy?: string | undefined; }) => { name: string; toy?: string | undefined; }, "type">; }> = undefined> = T extends undefined ? {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n} : T extends TypesOf<{\n    Cat: VariantCreator<"Animal/Cat", (input: {\n        name: string;\n    }) => {\n        name: string;\n    }, "type">;\n    Dog: VariantCreator<"Animal/Dog", (input: {\n        name: string;\n        toy?: string | undefined;\n    }) => {\n        name: string;\n        toy?: string | undefined;\n    }, "type">;\n}> ? Extract<...> | Extract<...> : {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}'},"ScopedAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(type parameter) T in type ScopedAnimal<T extends TypeNames<{ Cat: VariantCreator<"Animal/Cat", (input: { name: string; }) => { name: string; }, "type">; Dog: VariantCreator<"Animal/Dog", (input: { name: string; toy?: string | undefined; }) => { name: string; toy?: string | undefined; }, "type">; }> = undefined>'},"T")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"extends"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Get the literal union for a variant type's names, plus `undefined`.\n\n(alias) type TypeNames<T extends VariantModule<string>> = TypesOf<T> | undefined\nimport TypeNames"},"TypeNames")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ScopedAnimal: {\n    Cat: VariantCreator<"Animal/Cat", (input: {\n        name: string;\n    }) => {\n        name: string;\n    }, "type">;\n    Dog: VariantCreator<"Animal/Dog", (input: {\n        name: string;\n        toy?: string | undefined;\n    }) => {\n        name: string;\n        toy?: string | undefined;\n    }, "type">;\n}'},"ScopedAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"undefined>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<...>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ScopedAnimal: {\n    Cat: VariantCreator<"Animal/Cat", (input: {\n        name: string;\n    }) => {\n        name: string;\n    }, "type">;\n    Dog: VariantCreator<"Animal/Dog", (input: {\n        name: string;\n        toy?: string | undefined;\n    }) => {\n        name: string;\n        toy?: string | undefined;\n    }, "type">;\n}'},"ScopedAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(type parameter) T in type ScopedAnimal<T extends TypeNames<{ Cat: VariantCreator<"Animal/Cat", (input: { name: string; }) => { name: string; }, "type">; Dog: VariantCreator<"Animal/Dog", (input: { name: string; toy?: string | undefined; }) => { name: string; toy?: string | undefined; }, "type">; }> = undefined>'},"T")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const cat: {\n    type: "Animal/Cat";\n    name: string;\n}'},"cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const ScopedAnimal: {\n    Cat: VariantCreator<"Animal/Cat", (input: {\n        name: string;\n    }) => {\n        name: string;\n    }, "type">;\n    Dog: VariantCreator<"Animal/Dog", (input: {\n        name: string;\n        toy?: string | undefined;\n    }) => {\n        name: string;\n        toy?: string | undefined;\n    }, "type">;\n}'},"ScopedAnimal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) Cat: (input: {\n    name: string;\n}) => {\n    type: "Animal/Cat";\n    name: string;\n}'},"Cat")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) name: string"},"name"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Perseus"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"const rating: (animal: ScopedAnimal) => number"},"rating")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type ScopedAnimal<T extends TypeNames<{ Cat: VariantCreator<"Animal/Cat", (input: { name: string; }) => { name: string; }, "type">; Dog: VariantCreator<"Animal/Dog", (input: { name: string; toy?: string | undefined; }) => { name: string; toy?: string | undefined; }, "type">; }> = undefined> = T extends undefined ? {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n} : T extends TypesOf<{\n    Cat: VariantCreator<"Animal/Cat", (input: {\n        name: string;\n    }) => {\n        name: string;\n    }, "type">;\n    Dog: VariantCreator<"Animal/Dog", (input: {\n        name: string;\n        toy?: string | undefined;\n    }) => {\n        name: string;\n        toy?: string | undefined;\n    }, "type">;\n}> ? Extract<...> | Extract<...> : {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}'},"ScopedAnimal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Match an instance of a variant or literal union against its possible cases.\n\n(alias) match<{\n    name: string;\n    type: "Cat";\n} | {\n    name: string;\n    toy?: string | undefined;\n    type: "Dog";\n}, {\n    Cat: (c: {\n        name: string;\n        type: "Cat";\n    }) => number;\n    Dog: (d: {\n        name: string;\n        toy?: string | undefined;\n        type: "Dog";\n    }) => number;\n}, string>(target: string | ... 1 more ... | {\n    name: string;\n    toy?: string | undefined;\n    type: "Dog";\n}, handler: {\n    Cat: (c: {\n        name: string;\n        type: "Cat";\n    }) => number;\n    Dog: (d: {\n        name: string;\n        toy?: string | undefined;\n        type: "Dog";\n    }) => number;\n} | ((t: {\n    name: string;\n    type: "Cat";\n} | {\n    name: string;\n    toy?: string | undefined;\n    type: "Dog";\n}) => {\n    Cat: (c: {\n        name: string;\n        type: "Cat";\n    }) => number;\n    Dog: (d: {\n        name: string;\n        toy?: string | undefined;\n        type: "Dog";\n    }) => number;\n})): number (+3 overloads)\nimport match'},"match")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) descope<{\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}>(target: {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}): {\n    name: string;\n    type: "Cat";\n} | {\n    name: string;\n    toy?: string | undefined;\n    type: "Dog";\n}\nimport descope'},"descope")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) Cat: (c: {\n    name: string;\n    type: "Cat";\n}) => number'},"Cat"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) c: {\n    name: string;\n    type: "Cat";\n}'},"c")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"1"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(property) Dog: (d: {\n    name: string;\n    toy?: string | undefined;\n    type: "Dog";\n}) => number'},"Dog"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) d: {\n    name: string;\n    toy?: string | undefined;\n    type: "Dog";\n}'},"d")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"2"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")))))),(0,s.kt)("p",null,"Though it's also possible to work with the types directly."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const rating: (animal: ScopedAnimal) => number"},"rating")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type ScopedAnimal<T extends TypeNames<{ Cat: VariantCreator<"Animal/Cat", (input: { name: string; }) => { name: string; }, "type">; Dog: VariantCreator<"Animal/Dog", (input: { name: string; toy?: string | undefined; }) => { name: string; toy?: string | undefined; }, "type">; }> = undefined> = T extends undefined ? {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n} : T extends TypesOf<{\n    Cat: VariantCreator<"Animal/Cat", (input: {\n        name: string;\n    }) => {\n        name: string;\n    }, "type">;\n    Dog: VariantCreator<"Animal/Dog", (input: {\n        name: string;\n        toy?: string | undefined;\n    }) => {\n        name: string;\n        toy?: string | undefined;\n    }, "type">;\n}> ? Extract<...> | Extract<...> : {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}'},"ScopedAnimal"),") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Match an instance of a variant or literal union against its possible cases.\n\n(alias) match<{\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}, {\n    \'Animal/Cat\': (c: {\n        type: "Animal/Cat";\n        name: string;\n    }) => number;\n    \'Animal/Dog\': (d: {\n        type: "Animal/Dog";\n        name: string;\n        toy?: string | undefined;\n    }) => number;\n}, string>(target: string | ... 1 more ... | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}, handler: {\n    \'Animal/Cat\': (c: {\n        type: "Animal/Cat";\n        name: string;\n    }) => number;\n    \'Animal/Dog\': (d: {\n        type: "Animal/Dog";\n        name: string;\n        toy?: string | undefined;\n    }) => number;\n} | ((t: {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}) => {\n    \'Animal/Cat\': (c: {\n        type: "Animal/Cat";\n        name: string;\n    }) => number;\n    \'Animal/Dog\': (d: {\n        type: "Animal/Dog";\n        name: string;\n        toy?: string | undefined;\n    }) => number;\n})): number (+3 overloads)\nimport match'},"match")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Animal/Cat'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) c: {\n    type: "Animal/Cat";\n    name: string;\n}'},"c")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#4EADAD"}},"1"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Animal/Dog'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) d: {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}'},"d")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#4EADAD"}},"2"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"})"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"const rating: (animal: ScopedAnimal) => number"},"rating")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type ScopedAnimal<T extends TypeNames<{ Cat: VariantCreator<"Animal/Cat", (input: { name: string; }) => { name: string; }, "type">; Dog: VariantCreator<"Animal/Dog", (input: { name: string; toy?: string | undefined; }) => { name: string; toy?: string | undefined; }, "type">; }> = undefined> = T extends undefined ? {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n} : T extends TypesOf<{\n    Cat: VariantCreator<"Animal/Cat", (input: {\n        name: string;\n    }) => {\n        name: string;\n    }, "type">;\n    Dog: VariantCreator<"Animal/Dog", (input: {\n        name: string;\n        toy?: string | undefined;\n    }) => {\n        name: string;\n        toy?: string | undefined;\n    }, "type">;\n}> ? Extract<...> | Extract<...> : {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}'},"ScopedAnimal"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Match an instance of a variant or literal union against its possible cases.\n\n(alias) match<{\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}, {\n    \'Animal/Cat\': (c: {\n        type: "Animal/Cat";\n        name: string;\n    }) => number;\n    \'Animal/Dog\': (d: {\n        type: "Animal/Dog";\n        name: string;\n        toy?: string | undefined;\n    }) => number;\n}, string>(target: string | ... 1 more ... | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}, handler: {\n    \'Animal/Cat\': (c: {\n        type: "Animal/Cat";\n        name: string;\n    }) => number;\n    \'Animal/Dog\': (d: {\n        type: "Animal/Dog";\n        name: string;\n        toy?: string | undefined;\n    }) => number;\n} | ((t: {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}) => {\n    \'Animal/Cat\': (c: {\n        type: "Animal/Cat";\n        name: string;\n    }) => number;\n    \'Animal/Dog\': (d: {\n        type: "Animal/Dog";\n        name: string;\n        toy?: string | undefined;\n    }) => number;\n})): number (+3 overloads)\nimport match'},"match")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) animal: {\n    type: "Animal/Cat";\n    name: string;\n} | {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}'},"animal")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Animal/Cat"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) c: {\n    type: "Animal/Cat";\n    name: string;\n}'},"c")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"1"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Animal/Dog"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) d: {\n    type: "Animal/Dog";\n    name: string;\n    toy?: string | undefined;\n}'},"d")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"2"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")")))))),(0,s.kt)("h3",{id:"prematching"},"Prematching"),(0,s.kt)("p",null,"Match on a type ahead of time. No variable instance necessary. "),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"describeAnimal"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"prematch"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"Animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},")({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"dog"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"name"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"favoriteBall"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"name"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}}," is playing with their "),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"favoriteBall"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}}," ball`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"cat"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"name"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"name"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}}," is resting on the windowsill`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"snake"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": ({"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"name"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"pattern"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}) "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"name"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}}," is warming his "),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"pattern"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}}," skin against the light`"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"});")),(0,s.kt)("div",{parentName:"code",className:"line"}),(0,s.kt)("div",{parentName:"code",className:"line"}),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"cerberus"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"Animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"."),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"dog"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({name: "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'Cerberus'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", favoriteBall: "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'red'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"});")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"description"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"describeAnimal"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"cerberus"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},");")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#506565"}},'// ^ "Cerberus is playing with their red ball"'))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"describeAnimal"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," prematch"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"Animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    dog: "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"name"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"favoriteBall"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"name"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"} is playing with their ${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"favoriteBall"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"} ball"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    cat: "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"name"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"name"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"} is resting on the windowsill"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    snake: "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"({"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"name"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"pattern"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"})"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"name"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"} is warming his ${"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"pattern"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"} skin against the light"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"`"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"}),(0,s.kt)("div",{parentName:"code",className:"line"}),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"cerberus"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"Animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},".dog"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{name: "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"Cerberus"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", favoriteBall: "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"red"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"description"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," describeAnimal"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"cerberus"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"//"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},' ^ "Cerberus is playing with their red ball"')))))),(0,s.kt)("p",null,"This can be accessed in two ways:"),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"matchAnimal1"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"prematch"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"Animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},");")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"matchAnimal2"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},"prematch"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"<Animal>();"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"matchAnimal1"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," prematch"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"Animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"matchAnimal2"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," prematch"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},"Animal"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")))))),(0,s.kt)("h3",{id:"unpack"},"Unpack"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"payload()")," helper function is commonly used. Unpacking the payload from the variant results in typing ",(0,s.kt)("inlineCode",{parentName:"p"},"({payload}) => payload,")," many times. This lambda is available as ",(0,s.kt)("inlineCode",{parentName:"p"},"unpack"),"."),(0,s.kt)("div",{className:"shiki-twoslash-fragment"},(0,s.kt)("pre",{parentName:"div",className:"shiki comrade-contrast twoslash lsp",style:{backgroundColor:"rgb(26, 32, 32)",color:"#d6dbdb"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"import"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," {"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) const variant: {\n    <VM extends RawVariant>(template: GenericTemplate<VM>): Identity<GenericVariantRecord<VM, "type">>;\n    <VM_1 extends RawVariant>(template: VM_1): Identity<...>;\n    <T extends string | VariantCreator<...>>(template: T[]): Identity<...>;\n}\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<...>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) const match: MatchOverloads<"type">\nimport match'},"match")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Extract the payload element from the object and return it.\n\n(alias) const unpack: <T>(x: {\n    payload: T;\n}) => T\nimport unpack"},"unpack")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Create a function that returns a value after being called.\n\n(alias) function constant<T>(x: T): () => T\nimport constant"},"constant")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Take a single variable of type T and store as 'payload'\n\n(alias) function payload<T>(_example?: T): (payload: T) => {\n    payload: T;\n}\nimport payload"},"payload")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"} "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"from"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#63A5A5"}},"'variant'"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const BadOption: {\n    Some: VariantCreator<"Some", (payload: unknown) => {\n        payload: unknown;\n    }, "type">;\n    None: VariantCreator<"None", () => {}, "type">;\n}'},"BadOption")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) variant<{\n    Some: (payload: unknown) => {\n        payload: unknown;\n    };\n    None: {};\n}>(template: {\n    Some: (payload: unknown) => {\n        payload: unknown;\n    };\n    None: {};\n}): {\n    Some: VariantCreator<"Some", (payload: unknown) => {\n        payload: unknown;\n    }, "type">;\n    None: VariantCreator<...>;\n} (+2 overloads)\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"({")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) Some: (payload: unknown) => {\n    payload: unknown;\n}"},"Some"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Take a single variable of type T and store as 'payload'\n\n(alias) payload<unknown>(_example?: unknown): (payload: unknown) => {\n    payload: unknown;\n}\nimport payload"},"payload")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"unknown"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},">(),")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) None: {}"},"None"),": {},")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"});")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type BadOption = {\n    type: "Some";\n    payload: unknown;\n} | {\n    type: "None";\n}'},"BadOption")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<...>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf"),"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const BadOption: {\n    Some: VariantCreator<"Some", (payload: unknown) => {\n        payload: unknown;\n    }, "type">;\n    None: VariantCreator<"None", () => {}, "type">;\n}'},"BadOption")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},">;")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"const extract: (opt: BadOption) => unknown"},"extract")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) opt: {\n    type: "Some";\n    payload: unknown;\n} | {\n    type: "None";\n}'},"opt")),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'type BadOption = {\n    type: "Some";\n    payload: unknown;\n} | {\n    type: "None";\n}'},"BadOption"),") "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'Match an instance of a variant or literal union against its possible cases.\n\n(alias) match<{\n    type: "Some";\n    payload: unknown;\n} | {\n    type: "None";\n}, {\n    Some: <unknown>(x: {\n        payload: unknown;\n    }) => unknown;\n    None: () => undefined;\n}, string>(target: string | {\n    type: "Some";\n    payload: unknown;\n} | {\n    type: "None";\n}, handler: {\n    Some: <unknown>(x: {\n        payload: unknown;\n    }) => unknown;\n    None: () => undefined;\n} | ((t: {\n    type: "Some";\n    payload: unknown;\n} | {\n    type: "None";\n}) => {\n    Some: <unknown>(x: {\n        payload: unknown;\n    }) => unknown;\n    None: () => undefined;\n})): unknown (+3 overloads)\nimport match'},"match")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) opt: {\n    type: "Some";\n    payload: unknown;\n} | {\n    type: "None";\n}'},"opt")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},", {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) Some: (x: {\n    payload: unknown;\n}) => unknown"},"Some"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Extract the payload element from the object and return it.\n\n(alias) const unpack: <T>(x: {\n    payload: T;\n}) => T\nimport unpack"},"unpack")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"    "),(0,s.kt)("span",{parentName:"div",style:{color:"#F9F7F1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) None: () => undefined"},"None")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},": () "),(0,s.kt)("span",{parentName:"div",style:{color:"#C24E4B"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#9BB7A7"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"var undefined"},"undefined")),(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#D6DBDB"}},"});"))))),(0,s.kt)("pre",{parentName:"div",className:"shiki Monotone-red-color-theme twoslash lsp",style:{backgroundColor:"#000000",color:"#ffffff"}},(0,s.kt)("div",{parentName:"pre",className:"language-id"},"ts"),(0,s.kt)("div",{parentName:"pre",className:"code-container"},(0,s.kt)("code",{parentName:"div"},(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"import"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"{"),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) const variant: {\n    <VM extends RawVariant>(template: GenericTemplate<VM>): Identity<GenericVariantRecord<VM, "type">>;\n    <VM_1 extends RawVariant>(template: VM_1): Identity<...>;\n    <T extends string | VariantCreator<...>>(template: T[]): Identity<...>;\n}\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<...>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) const match: MatchOverloads<"type">\nimport match'},"match")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Extract the payload element from the object and return it.\n\n(alias) const unpack: <T>(x: {\n    payload: T;\n}) => T\nimport unpack"},"unpack")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Create a function that returns a value after being called.\n\n(alias) function constant<T>(x: T): () => T\nimport constant"},"constant")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Take a single variable of type T and store as 'payload'\n\n(alias) function payload<T>(_example?: T): (payload: T) => {\n    payload: T;\n}\nimport payload"},"payload")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"from"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"variant"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"'"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const BadOption: {\n    Some: VariantCreator<"Some", (payload: unknown) => {\n        payload: unknown;\n    }, "type">;\n    None: VariantCreator<"None", () => {}, "type">;\n}'},"BadOption")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'(alias) variant<{\n    Some: (payload: unknown) => {\n        payload: unknown;\n    };\n    None: {};\n}>(template: {\n    Some: (payload: unknown) => {\n        payload: unknown;\n    };\n    None: {};\n}): {\n    Some: VariantCreator<"Some", (payload: unknown) => {\n        payload: unknown;\n    }, "type">;\n    None: VariantCreator<...>;\n} (+2 overloads)\nimport variant'},"variant")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"{")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) Some: (payload: unknown) => {\n    payload: unknown;\n}"},"Some"),": ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"Take a single variable of type T and store as 'payload'\n\n(alias) payload<unknown>(_example?: unknown): (payload: unknown) => {\n    payload: unknown;\n}\nimport payload"},"payload")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<unknown>()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) None: {}"},"None"),": {},")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"type"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type BadOption = {\n    type: "Some";\n    payload: unknown;\n} | {\n    type: "None";\n}'},"BadOption")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"**Create a variant type**.\n\n(alias) type VariantOf<T extends VariantModule<string>, TType = undefined> = TType extends undefined ? Identity<VariantTypeSpread<T>[keyof T]> : TType extends TypesOf<T> ? Extract<Identity<...>, Record<...>> : Identity<...>\nimport VariantOf"},"VariantOf")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"<"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"typeof"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'const BadOption: {\n    Some: VariantCreator<"Some", (payload: unknown) => {\n        payload: unknown;\n    }, "type">;\n    None: VariantCreator<"None", () => {}, "type">;\n}'},"BadOption")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},">"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")),(0,s.kt)("div",{parentName:"code",className:"line"},"\xa0"),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"const"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"const extract: (opt: BadOption) => unknown"},"extract")," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"="),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) opt: {\n    type: "Some";\n    payload: unknown;\n} | {\n    type: "None";\n}'},"opt")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},":"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'type BadOption = {\n    type: "Some";\n    payload: unknown;\n} | {\n    type: "None";\n}'},"BadOption"),")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," ",(0,s.kt)("data-lsp",{parentName:"span",lsp:'Match an instance of a variant or literal union against its possible cases.\n\n(alias) match<{\n    type: "Some";\n    payload: unknown;\n} | {\n    type: "None";\n}, {\n    Some: <unknown>(x: {\n        payload: unknown;\n    }) => unknown;\n    None: () => undefined;\n}, string>(target: string | {\n    type: "Some";\n    payload: unknown;\n} | {\n    type: "None";\n}, handler: {\n    Some: <unknown>(x: {\n        payload: unknown;\n    }) => unknown;\n    None: () => undefined;\n} | ((t: {\n    type: "Some";\n    payload: unknown;\n} | {\n    type: "None";\n}) => {\n    Some: <unknown>(x: {\n        payload: unknown;\n    }) => unknown;\n    None: () => undefined;\n})): unknown (+3 overloads)\nimport match'},"match")),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"("),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:'(parameter) opt: {\n    type: "Some";\n    payload: unknown;\n} | {\n    type: "None";\n}'},"opt")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},", {")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) Some: (x: {\n    payload: unknown;\n}) => unknown"},"Some"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#F56565"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"Extract the payload element from the object and return it.\n\n(alias) const unpack: <T>(x: {\n    payload: T;\n}) => T\nimport unpack"},"unpack")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"    ",(0,s.kt)("data-lsp",{parentName:"span",lsp:"(property) None: () => undefined"},"None"),": "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"()"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},"=>"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}}," "),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},(0,s.kt)("data-lsp",{parentName:"span",lsp:"var undefined"},"undefined")),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},",")),(0,s.kt)("div",{parentName:"code",className:"line"},(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},"}"),(0,s.kt)("span",{parentName:"div",style:{color:"#A8A8B1"}},")"),(0,s.kt)("span",{parentName:"div",style:{color:"#FFFFFF"}},";")))))))}y.isMDXComponent=!0}}]);