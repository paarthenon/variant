"use strict";(self.webpackChunkvariant_site=self.webpackChunkvariant_site||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"3.0.0-dev \ud83d\udd28","banner":"unreleased","badge":true,"noIndex":false,"className":"docs-version-current","isLast":false,"docsSidebars":{"someSidebar":[{"type":"link","label":"Introduction","href":"/variant/docs/next/intro","docId":"intro"},{"type":"category","label":"Tutorial","collapsed":false,"items":[{"type":"link","label":"Introducing \\"Kind of Super\\"","href":"/variant/docs/next/tutorial/part-zero","docId":"tutorial/part-zero"}],"collapsible":true},{"type":"category","label":"The Book","collapsed":false,"items":[{"type":"link","label":"Creating Variants","href":"/variant/docs/next/book/creation","docId":"book/creation"},{"type":"category","label":"Fancier Variants","collapsed":true,"items":[{"type":"link","label":"Scoped Variants","href":"/variant/docs/next/book/scoped","docId":"book/scoped"},{"type":"link","label":"Recursive Variants","href":"/variant/docs/next/book/recursive","docId":"book/recursive"},{"type":"link","label":"Generic Variants","href":"/variant/docs/next/book/generic","docId":"book/generic"},{"type":"link","label":"Augmented Variants","href":"/variant/docs/next/book/augment","docId":"book/augment"}],"collapsible":true},{"type":"link","label":"Inspection","href":"/variant/docs/next/book/inspection","docId":"book/inspection"},{"type":"link","label":"Organization","href":"/variant/docs/next/book/organization","docId":"book/organization"},{"type":"link","label":"Match","href":"/variant/docs/next/book/match","docId":"book/match"},{"type":"link","label":"Matcher","href":"/variant/docs/next/book/matcher","docId":"book/matcher"},{"type":"link","label":"Catalog","href":"/variant/docs/next/book/catalog","docId":"book/catalog"},{"type":"link","label":"Flags and Matrix","href":"/variant/docs/next/book/flags","docId":"book/flags"},{"type":"link","label":"Utilities","href":"/variant/docs/next/book/utilities","docId":"book/utilities"}],"collapsible":true},{"type":"category","label":"Articles","items":[{"type":"link","label":"Naming Conventions","href":"/variant/docs/next/articles/naming","docId":"articles/naming"},{"type":"link","label":"Internal Semantics","href":"/variant/docs/next/articles/semantics","docId":"articles/semantics"},{"type":"link","label":"That type annotation","href":"/variant/docs/next/articles/that-type","docId":"articles/that-type"},{"type":"link","label":"Documentation","href":"/variant/docs/next/articles/documentation","docId":"articles/documentation"},{"type":"link","label":"Procedural Generation","href":"/variant/docs/next/articles/procedural-generation","docId":"articles/procedural-generation"},{"type":"link","label":"Elevator Pitch","href":"/variant/docs/next/articles/pitch","docId":"articles/pitch"},{"type":"link","label":"Changelog","href":"/variant/docs/next/changelog","docId":"changelog"},{"type":"link","label":"New in Variant 3.0 \u2728","href":"/variant/docs/next/new-in-3.0","docId":"new-in-3.0"},{"type":"link","label":"Cheat Sheet","href":"/variant/docs/next/cheat","docId":"cheat"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Libraries","items":[{"type":"link","label":"React","href":"/variant/docs/next/libraries/react","docId":"libraries/react"},{"type":"link","label":"Redux (+ React)","href":"/variant/docs/next/libraries/redux","docId":"libraries/redux"},{"type":"link","label":"redux-toolkit","href":"/variant/docs/next/libraries/redux-toolkit","docId":"libraries/redux-toolkit"},{"type":"link","label":"rx/js - Observables","href":"/variant/docs/next/libraries/rxjs","docId":"libraries/rxjs"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Todo","href":"/variant/docs/next/todo","docId":"todo"},{"type":"link","label":"\ud83d\udcd1 Glossary of Terms","href":"/variant/docs/next/glossary","docId":"glossary"},{"type":"link","label":"\u2615 API","href":"/variant/docs/next/api/modules","docId":"api/modules"}],"secondSidebar":[{"type":"link","label":"About","href":"/variant/docs/next/about","docId":"about"},{"type":"link","label":"Credits & Attribution","href":"/variant/docs/next/credits","docId":"credits"}]},"docs":{"about":{"id":"about","title":"About","description":"Variant is a project I wished existed. I love TypeScript, but I find it\'s discriminated unions implementation elegant in some ways and clunky in others. See the [motivation page] for some of the problems this library addresses.","sidebar":"secondSidebar"},"api/index":{"id":"api/index","title":"Variant API","description":"A variant type is like an enum but each case can hold some extra data."},"api/modules":{"id":"api/modules","title":"variant","description":"Type aliases","sidebar":"someSidebar"},"articles/documentation":{"id":"articles/documentation","title":"Documentation","description":"Variant makes efforts to preserve documentation and user comments as it transforms","sidebar":"someSidebar"},"articles/naming":{"id":"articles/naming","title":"Naming Conventions","description":"First and foremost, Variant does not care how you refer to your variables. Use whatever naming scheme you and your team find readable and aesthetically pleasing.","sidebar":"someSidebar"},"articles/pitch":{"id":"articles/pitch","title":"Elevator Pitch","description":"Variant is a small (3kB gzipped) library that can dramatically reorganize your codebase for code clarity, safety, and expressivity.","sidebar":"someSidebar"},"articles/procedural-generation":{"id":"articles/procedural-generation","title":"Procedural Generation","description":"I\'d like to generate an Animal to populate my little pet store. This is complicated by the fact that different animals require different parameters to create, or may need to be constructed in different ways.","sidebar":"someSidebar"},"articles/semantics":{"id":"articles/semantics","title":"Internal Semantics","description":"You\'ll know if you should be reading this.","sidebar":"someSidebar"},"articles/that-type":{"id":"articles/that-type","title":"That type annotation","description":"I admit the full version of the type annotation I ask you to include is... a bit much.","sidebar":"someSidebar"},"articles/type-name":{"id":"articles/type-name","title":"\'type\', \'tag\', and \'kind\'","description":"Some users may prefer a discriminant other than type. The keys tag and kind are popular in various circles, and typename is used in GraphQL communities. The key typeis just the default. You can make a new variant() function to make variants with another discriminant by calling variantFactory."},"book/advanced-creation":{"id":"book/advanced-creation","title":"Advanced Creation","description":"Variants are templates"},"book/augment":{"id":"book/augment","title":"Augmented Variants","description":"A variant can augment some template or existing variant with extra properties. In the simplest case, we can patch in an extra property that would be tedious to write in real life. For example, let\'s add a timestamp to the actions we create so each action can report when it was made.","sidebar":"someSidebar"},"book/catalog":{"id":"book/catalog","title":"Catalog","description":"A Catalog is a union of literal types. Use a catalog when needing to track which state some element is in, but no additional details. These maps of constants are most often used to store strings, but may also be used with numbers or booleans.","sidebar":"someSidebar"},"book/creation":{"id":"book/creation","title":"Creating Variants","description":"Variant aims to give the user complete control over how their objects are created. A variant\'s constructor may perform side effects, rely on asynchronous information, or generate objects of any kind.","sidebar":"someSidebar"},"book/flags":{"id":"book/flags","title":"Flags and Matrix","description":"Flags and Matrix enable the creation of typed property bags, collections that can carry a diverse set of data and correlate keys to subtypes. Inspired by flag(s) enums, this surprisingly useful pattern allows some object to express that it possesses one or more distinct qualities captured by the forms of some variant. Filter sets, configuration records, and data flags are particulaly well suited to this approach.","sidebar":"someSidebar"},"book/generic":{"id":"book/generic","title":"Generic Variants","description":"Use the onTerms helper function to create generic variants. Let\'s create the classic Option type, with Some, which contains data, and None, which doesn\'t. Some of you know it as Maybe, with Just and Nothing instead. These are an excellent alternative to null handling, which has been referred to by its creator as his billion dollar mistake.","sidebar":"someSidebar"},"book/inspection":{"id":"book/inspection","title":"Inspection","description":"Tools to answer two simple questions","sidebar":"someSidebar"},"book/match":{"id":"book/match","title":"Match","description":"Pattern matching is the crown jewel of variant types. Like the traditional switch statement, a match expression can process some arbitrary variant with special handling based on its type at runtime. Unlike a switch statement, matches are expressions and they are exhaustive by default. As expressions, matches can be used inline as the results of expression-bodied lambdas, JSX attributes, and more. As exhaustive handlers, matches can be assumed to resolve.","sidebar":"someSidebar"},"book/matcher":{"id":"book/matcher","title":"Matcher","description":"Variant providers matcher(), a builder-pattern API for matching against variants and literal unions. The matcher allows users to build a handler piece-by-piece, which can become especially important for larger variants. As your unions grow to dozens or hundreds of cases, the matcher will become more and more relevant.","sidebar":"someSidebar"},"book/organization":{"id":"book/organization","title":"Organization","description":"As an application grows, managing a list of options in the dozens or hundreds can be difficult to do in one place. Users are encouraged to create smaller variants (across files as appropriate) which are then combined to generate these larger unions.","sidebar":"someSidebar"},"book/recursive":{"id":"book/recursive","title":"Recursive Variants","description":"The pass() function is somewhat broken with fields()","sidebar":"someSidebar"},"book/scoped":{"id":"book/scoped","title":"Scoped Variants","description":"Scoped Variants","sidebar":"someSidebar"},"book/utilities":{"id":"book/utilities","title":"Utilities","description":"Beyond the core functionality provided, variant includes a couple of utilities that may be beneficial.","sidebar":"someSidebar"},"changelog":{"id":"changelog","title":"Changelog","description":"Summary of the changes in each patch.","sidebar":"someSidebar"},"cheat":{"id":"cheat","title":"Cheat Sheet","description":"Assume Animal is defined as in the Introduction","sidebar":"someSidebar"},"credits":{"id":"credits","title":"Credits & Attribution","description":"I could not have built this so cleanly or quickly myself. I owe thanks to several projects.","sidebar":"secondSidebar"},"glossary":{"id":"glossary","title":"\ud83d\udcd1 Glossary of Terms","description":"I will use a monospaced name match() when referring to the concrete types and values.","sidebar":"someSidebar"},"intro":{"id":"intro","title":"Introduction","description":"**Variant** is a language feature disguised as a library.","sidebar":"someSidebar"},"libraries/react":{"id":"libraries/react","title":"React","description":"React is a popular front-end rendering library. Thanks to their shared foucs on modularity and composability, React and Variant pair incredibly well together. React conditional rendering may be controlled by variant match functions. Variants may be used for internal logic or dynamically fetched data, serving well as serializable types (which can be kept in the app state) that can still be inspected at runtime.","sidebar":"someSidebar"},"libraries/redux":{"id":"libraries/redux","title":"Redux (+ React)","description":"Redux is a genre-defining state management library, most often paired with React. The library is built around three core concepts, each of which can benefit from Variant. They are:","sidebar":"someSidebar"},"libraries/redux-toolkit":{"id":"libraries/redux-toolkit","title":"redux-toolkit","description":"Redux Toolkit is an opinionated library of batteries-included components and tools intended to assist react users by providing sane defaults. I have been asked to compare Variant to redux-toolkit on a number of occasions. It makes sense that readers would connect the two - createAction is almost identical to our variation().","sidebar":"someSidebar"},"libraries/rxjs":{"id":"libraries/rxjs","title":"rx/js - Observables","description":"rxjs works really well with variant. Variant types are perfect for creating heterogenous lists or streams. An observable stream will be unpacked into other types of functionality.","sidebar":"someSidebar"},"mdx":{"id":"mdx","title":"Powered by MDX","description":"You can write JSX and use React components within your Markdown thanks to MDX."},"migration":{"id":"migration","title":"Migration","description":"Library Migration, traditionally a complex and time-consuming task, is made simpler in Variant. Each component"},"new-in-3.0":{"id":"new-in-3.0","title":"New in Variant 3.0 \u2728","description":"Variant 3.0 brings some significant and exciting changes to the library. It has been written from the ground up to be more flexible, powerful, and usable than ever before. Documentation has been integrated more tightly into all types and functions. The benefit of experience has inspired the removal or restructuring of some functionality and the implementation of much more.","sidebar":"someSidebar"},"oldapi":{"id":"oldapi","title":"API Reference","description":"Functions"},"todo":{"id":"todo","title":"Todo","description":"Using a custom discriminant","sidebar":"someSidebar"},"tutorial/part-four":{"id":"tutorial/part-four","title":"Part 4 - Making Enemies","description":"This section we will:"},"tutorial/part-one":{"id":"tutorial/part-one","title":"Part 1 - Defining a Hero","description":"Over the course of this tutorial we will develop the logic for a small game. Our hero will have one or more superpowers that will enable them to complete different tasks. These powers may be things like flight, elemental magic, or teleportation. As you might imagine, these powers have very different features and constraints. Teleportation, for example, may have a maximum distance that the user can travel, along with a cooldown to limit the ability\'s use. The data model for elemental magic would of course need the specific element the user can control."},"tutorial/part-three":{"id":"tutorial/part-three","title":"Part 3 - Identifying Threats","description":"This section we will"},"tutorial/part-two":{"id":"tutorial/part-two","title":"Part 2 - Shaping a World","description":"Last section we"},"tutorial/part-zero":{"id":"tutorial/part-zero","title":"Introducing \\"Kind of Super\\"","description":"I am dealing with a wrist injury and have limited typing. This tutorial is still coming, but will be posted in stages. This page is a placeholder for some of the content that is to come. For now, please continue on to the book.","sidebar":"someSidebar"}}}')}}]);