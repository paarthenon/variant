"use strict";(self.webpackChunkvariant_site=self.webpackChunkvariant_site||[]).push([[2291],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return h}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(a),d=r,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5309:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var n=a(3117),r=a(102),i=(a(7294),a(3905)),o=["components"],l={slug:"glossary",title:"\ud83d\udcd1 Glossary of Terms"},s=void 0,p={unversionedId:"glossary",id:"glossary",title:"\ud83d\udcd1 Glossary of Terms",description:"I will use a monospaced name match() when referring to the concrete types and values.",source:"@site/docs/glossary.md",sourceDirName:".",slug:"/glossary",permalink:"/variant/docs/next/glossary",draft:!1,tags:[],version:"current",frontMatter:{slug:"glossary",title:"\ud83d\udcd1 Glossary of Terms"},sidebar:"someSidebar",previous:{title:"Todo",permalink:"/variant/docs/next/todo"},next:{title:"\u2615 API",permalink:"/variant/docs/next/api/modules"}},c={},m=[{value:"ADT",id:"adt",level:2},{value:"Algebraic Data Type",id:"algebraic-data-type",level:2},{value:"Composability",id:"composability",level:2},{value:"Discriminant",id:"discriminant",level:2},{value:"Domain",id:"domain",level:2},{value:"Exhaustive",id:"exhaustive",level:2},{value:"Expression",id:"expression",level:2},{value:"Iff",id:"iff",level:2},{value:"Match",id:"match",level:2},{value:"Model",id:"model",level:2},{value:"Tag",id:"tag",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Variant",id:"variant",level:2},{value:"Variation",id:"variation",level:2}],u={toc:m},d="wrapper";function h(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)(d,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{title:"Notation",type:"note"},(0,i.kt)("p",{parentName:"admonition"},"I will use a monospaced name ",(0,i.kt)("inlineCode",{parentName:"p"},"match()")," when referring to the concrete types and values."),(0,i.kt)("p",{parentName:"admonition"},"When speaking generally, I will refer to ",(0,i.kt)("em",{parentName:"p"},"matching")," or ",(0,i.kt)("em",{parentName:"p"},"the match functions"),", when describing ",(0,i.kt)("inlineCode",{parentName:"p"},"match()"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"matcher()"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"prematch()"),".")),(0,i.kt)("h2",{id:"adt"},"ADT"),(0,i.kt)("p",null,"An ",(0,i.kt)("a",{parentName:"p",href:"#algebraic-data-type"},"Algebraic Data Type"),"."),(0,i.kt)("h2",{id:"algebraic-data-type"},"Algebraic Data Type"),(0,i.kt)("p",null,"Another name for a variant type."),(0,i.kt)("h2",{id:"composability"},"Composability"),(0,i.kt)("p",null,"Long story short, two things are composable if they can interact and perform their intended functionality without needing to be aware of each other or performing special handling."),(0,i.kt)("h2",{id:"discriminant"},"Discriminant"),(0,i.kt)("p",null,"TypeScript discriminated unions require at least one property to be shared among all forms with a unique string literal type registered to each form. This property (and more specifically it's key) is the discriminant\u2014the value used to discriminate between the options."),(0,i.kt)("h2",{id:"domain"},"Domain"),(0,i.kt)("p",null,"TODO: Steal this from the intro of the previous version."),(0,i.kt)("h2",{id:"exhaustive"},"Exhaustive"),(0,i.kt)("p",null,'The term "exhaustive" refers to some control flow statement where every branch is handled. Variant\'s match functions are exhaustive until instructed otherwise.'),(0,i.kt)("h2",{id:"expression"},"Expression"),(0,i.kt)("p",null,"An ",(0,i.kt)("strong",{parentName:"p"},"expression"),", in contrast to a ",(0,i.kt)("strong",{parentName:"p"},"statement")," is a section of code that returns a value and so can be used inline within other expressions or statements. "),(0,i.kt)("h2",{id:"iff"},"Iff"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/If_and_only_if"},"If-and-only-if.")),(0,i.kt)("h2",{id:"match"},"Match"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"api#match"},(0,i.kt)("inlineCode",{parentName:"a"},"match()"))," - match a variant as an expression."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"api#matcher"},(0,i.kt)("inlineCode",{parentName:"a"},"matcher()"))," - match a variant in a builder pattern."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"api#prematch"},(0,i.kt)("inlineCode",{parentName:"a"},"prematch()"))," - match against a type of variant ahead-of-time.")),(0,i.kt)("p",null,"An operation resembling a ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch"},"switch")," statement that can be performed on some instance of a ",(0,i.kt)("a",{parentName:"p",href:"#variant"},"variant"),". Matching in general refers to processing an instance of a variant by providing instructions on how to respond to each potential ",(0,i.kt)("a",{parentName:"p",href:"#variation"},"variation"),". There are several match functions available depending on your needs and aesthetic preferences."),(0,i.kt)("h2",{id:"model"},"Model"),(0,i.kt)("p",null,"Model is a bit of an overloaded term, but generally speaking refers to the abstract representation of your ",(0,i.kt)("a",{parentName:"p",href:"#domain"},"domain")," concerns. In code, it generally refers to the interfaces and types you use in your core logic."),(0,i.kt)("h2",{id:"tag"},"Tag"),(0,i.kt)("p",null,'Discriminated unions are also called "Tagged Unions" referring to each of the shapes being labeled or tagged distinctly. The "tag" of the dog form of Animal would be "dog". '),(0,i.kt)("h2",{id:"typescript"},"TypeScript"),(0,i.kt)("p",null,"The language we all know and love. TypeScript is a statically typed layer on top of JavaScript, possibly the most widespread cross-platform language and runtime in the world."),(0,i.kt)("p",null,"Variant 3.0 introduces scoped variants which leverage TypeScript ",(0,i.kt)("inlineCode",{parentName:"p"},"4.1+"),"'s template literal features. As such, TypeScript ",(0,i.kt)("inlineCode",{parentName:"p"},"4.1+")," is required. "),(0,i.kt)("h2",{id:"variant"},"Variant"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"api#variant"},(0,i.kt)("inlineCode",{parentName:"a"},"variant()"))," - create a new variant.")),(0,i.kt)("p",null,"A variant is a uniquely powerful datatype. Like the traditional enum, a variant is capable of representing some state in different forms. Unlike the traditional enum, each form of a variant can maintain its own ",(0,i.kt)("em",{parentName:"p"},"distinct")," properties."),(0,i.kt)("p",null,"Variants are also known as ",(0,i.kt)("a",{parentName:"p",href:"https://www.cs.cornell.edu/courses/cs3110/2019sp/textbook/data/algebraic_data_types.html"},"algebraic data types")," in the functional world or ",(0,i.kt)("a",{parentName:"p",href:"https://basarat.gitbook.io/typescript/type-system/discriminated-unions"},"discriminated unions"),' in the TypeScript world. Rust programmers may have found the contrast between variants and enums confusing. Rust\'s "enums" ',(0,i.kt)("em",{parentName:"p"},"are")," proper variants, but this is not the case in most languages."),(0,i.kt)("h2",{id:"variation"},"Variation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"api#variation"},(0,i.kt)("inlineCode",{parentName:"a"},"variation()"))," - create a new variant.")),(0,i.kt)("p",null,"One of the potentially many forms of a ",(0,i.kt)("a",{parentName:"p",href:"#variant"},"variant"),". This is sometimes referred to as the ",(0,i.kt)("em",{parentName:"p"},"form")," or the ",(0,i.kt)("em",{parentName:"p"},"shape")," of the variant. If ",(0,i.kt)("strong",{parentName:"p"},"Animal")," is a variant, then ",(0,i.kt)("strong",{parentName:"p"},"cat")," is one ",(0,i.kt)("em",{parentName:"p"},"variation"),"."))}h.isMDXComponent=!0}}]);