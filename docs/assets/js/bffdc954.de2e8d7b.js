"use strict";(self.webpackChunkvariant_site=self.webpackChunkvariant_site||[]).push([[4027],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},l="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),l=p(n),m=a,d=l["".concat(s,".").concat(m)]||l[m]||f[m]||i;return n?r.createElement(d,o(o({ref:t},u),{},{components:n})):r.createElement(d,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[l]="string"==typeof e?e:a,o[1]=c;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},948:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return l}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=["components"],c={title:"Recursive Variants"},s=void 0,p={unversionedId:"book/recursive",id:"book/recursive",title:"Recursive Variants",description:"The pass() function is somewhat broken with fields()",source:"@site/docs/book/recursive.md",sourceDirName:"book",slug:"/book/recursive",permalink:"/variant/docs/next/book/recursive",draft:!1,tags:[],version:"current",frontMatter:{title:"Recursive Variants"},sidebar:"someSidebar",previous:{title:"Scoped Variants",permalink:"/variant/docs/next/book/scoped"},next:{title:"Generic Variants",permalink:"/variant/docs/next/book/generic"}},u={},l=[],f={toc:l},m="wrapper";function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)(m,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"pass()")," function is somewhat broken with ",(0,i.kt)("inlineCode",{parentName:"p"},"fields()"))),(0,i.kt)("p",null,"Recursive variants are a wonderful pattern for expressing and evaluating tree and list-like data. The traditional example involves a binary tree and we'll implement a proper one in the next section on ",(0,i.kt)("a",{parentName:"p",href:"generic"},"generic variants"),". In the meantime, let's do a binary tree of ",(0,i.kt)("inlineCode",{parentName:"p"},"Animal"),"s. An animal tree may not have many real world applications but please ",(0,i.kt)("em",{parentName:"p"},"bear")," with me. "),(0,i.kt)("p",null,"Recursive variants are a bit of a deviation from the norm. Wheras up to this point we've defined the variant using a template and inferred the type from there, recursive variants must define their type first and then implement the variant based on that contract. This is a limitation of TypeScript\u2014types may be recursive while values typically cannot."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\u23f2\ufe0f coming soon.")))}d.isMDXComponent=!0}}]);